{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Devops Project Lab Chile !","text":""},{"location":"#table-of-contents","title":"Table of Contents","text":"<p>Month 01</p><p>Weeks 1 - 4</p> <p>Month 02</p><p>Weeks 5 - 8</p> <p>Month 03</p><p>Weeks 9 - 12</p>"},{"location":"__init__/","title":"init","text":""},{"location":"month_01/","title":"DEVOPS PROJECT LAB CHILE","text":"<p>Step into the IT world under the mentors\u2019 guidance! Become job-ready and boost your skills with the practical experience of working on a project with real challenges</p> <p>Why should you choose DevOps? It\u2019s where your decisions matter: you\u2019ll deliver tangible business outcomes within your role and create a real business impact. You\u2019ll have a helicopter view over the operations and development, which will provide you with endless opportunities to learn and refine your skills.</p> <p>Develop your skills, broaden your mind and become a part of our team \u2013 we offer the Apprenticeship to the best alumni!</p> <p>PROJECT LAB ADVANTAGES</p> <ol> <li>3 months of practice to list on your CV  (February 10, 2025 to May 9, 2025)</li> <li>A real project with real challenges  </li> <li>Develop job-ready skills, both technical and soft skills  </li> <li>Mentors\u2019 advice and Tech Leads\u2019 guidance  </li> <li>Improve your English level with classes  </li> <li>Opportunity to enroll in the Apprenticeship program and become a Junior Developer  </li> </ol> <p>PROJECT LAB INFORMATION</p> Sphere Description Processes - Software development processes: Scrum, Jira, Kanban Programming &amp; OOP - Python, Code Conventions, Python Basics and OOP, VSCode usage   - Introduction to architecture and design patterns: MVC, Flask overview   - Testing types, Unit/Integration testing, Test design techniques   - Unit testing in Python, developing a testing environment, Documentation Database Management - Installing and configuring databases, User management (privileges, permissions, roles)   - Backups, Types, Recovery and disaster recovery, Basic monitoring   - Tables, relationships, keys, constraints understanding   - DDL, DML, DCL understanding   - Access to databases with Python using ORM Continuous Integration - Principles of continuous integration, Automated build concept   - CI using Jenkins   - Integration with Jira for ticket creation   - Implement basic monitoring for application resources Continuous Delivery - Continuous delivery intro, CD with CI Tools and plugins, CD Tools (GoCD) Branching Strategies - Source control, Git basics (GitHub, GitLab)   - Branches and tags management strategy Virtualization - Types of virtualization (hardware emulation, full virtualization, paravirtualization, OS-level virtualization)   - Containers (LXC, Docker) Automation - Shell Scripting   - Python for administration Monitoring - Distributed monitoring   - Logging (integrations, IaC Configs and alarms) Cloud Computing - Understanding services and applications by type   - Cloud service models   - Cloud computing platforms (AWS, Azure, Google Cloud, OpenStack, etc.)   - Orchestration (Terraform, AWS CloudFormation, Azure Resource Manager, etc.)"},{"location":"month_01/week_01/","title":"1\ufe0f\u20e3 Week 1","text":"Topic Description Basic Concepts Introduction to fundamental concepts. Git and GitHub Overview of Git version control and GitHub. Jira Introduction to Jira for project management."},{"location":"month_01/week_01/concepts/","title":"Basic Concepts","text":""},{"location":"month_01/week_01/concepts/#software-development-concepts","title":"Software Development Concepts","text":"<ol> <li> <p>Framework    A framework is a pre-built structure or foundation that provides reusable code and tools to facilitate software development. It defines a standard way to build and deploy applications, including libraries, APIs, and best practices. Examples include Django (Python), React (JavaScript), and Spring (Java).</p> </li> <li> <p>Software Development Life Cycle (SDLC)    SDLC is a structured process that guides the development of software from planning to deployment and maintenance. It typically includes stages such as planning, analysis, design, implementation, testing, deployment, and maintenance.</p> </li> <li> <p>eXtreme Programming (XP)    XP is an agile software development methodology that emphasizes frequent releases, continuous feedback, and collaboration between developers and customers. It promotes practices like test-driven development (TDD), pair programming, and continuous integration.</p> </li> <li> <p>SCRUM    SCRUM is an agile project management framework used for developing software in iterative cycles called sprints (usually 1-4 weeks). It involves roles like the Product Owner, Scrum Master, and Development Team, and uses ceremonies such as daily stand-ups, sprint planning, and retrospectives.</p> </li> <li> <p>Kanban    Kanban is a lean project management methodology that focuses on visualizing work, limiting work in progress (WIP), and improving workflow efficiency. It uses a board with columns (e.g., To Do, In Progress, Done) to track tasks.</p> </li> <li> <p>Native / Hybrid Mobile Applications </p> </li> <li> <p>Native applications: Apps built specifically for a particular mobile platform (iOS or Android) using platform-specific languages (Swift for iOS, Kotlin/Java for Android). They offer high performance and access to native device features.  </p> </li> <li> <p>Hybrid applications: Apps that combine web technologies (HTML, CSS, JavaScript) with a native wrapper to run on multiple platforms. They use frameworks like Ionic or React Native and are easier to maintain than native apps.</p> </li> </ol>"},{"location":"month_01/week_01/concepts/#general-software-concepts","title":"General Software Concepts","text":"<ol> <li> <p>Software    Software is a collection of programs, instructions, and data that enable a computer to perform specific tasks. It is divided into system software (like operating systems) and application software (like Microsoft Word or Google Chrome).</p> </li> <li> <p>Operating System (OS)    An OS is system software that manages computer hardware and software resources while providing a user interface. Examples include Windows, macOS, Linux, Android, and iOS.</p> </li> <li> <p>Application    An application (app) is software designed to perform specific tasks for users, such as word processing, web browsing, or email. Applications can be desktop-based, web-based, or mobile-based.</p> </li> <li> <p>CRUD (Create, Read, Update, Delete)     CRUD represents the four basic operations performed on data in a database or system:</p> <ul> <li>Create: Add new records or data.</li> <li>Read: Retrieve existing data.</li> <li>Update: Modify existing data.</li> <li>Delete: Remove existing data.</li> </ul> </li> </ol>"},{"location":"month_01/week_01/concepts/#cloud-computing-models","title":"Cloud Computing Models","text":"<ol> <li> <p>Software as a Service (SaaS)     A cloud computing model where users access software applications over the internet without installing them on their devices. Examples: Gmail, Dropbox, Microsoft 365.</p> </li> <li> <p>Platform as a Service (PaaS)     A cloud computing model that provides a platform for developers to build, test, and deploy applications without managing infrastructure. Examples: Google App Engine, AWS Elastic Beanstalk.</p> </li> <li> <p>Infrastructure as a Service (IaaS)     A cloud computing model that provides virtualized computing resources over the internet, such as servers, storage, and networking. Users have more control over the infrastructure. Examples: AWS EC2, Microsoft Azure Virtual Machines.</p> </li> </ol>"},{"location":"month_01/week_01/git/","title":"Git Introduction","text":""},{"location":"month_01/week_01/git/#what-is-version-control","title":"What is Version Control?","text":"<ul> <li>Version Control (VC), also known as Source Control (SCM), manages changes to documents, code, and other data.</li> <li>Common tasks include tracking changes, updates, resolving conflicts, and branching.</li> </ul>"},{"location":"month_01/week_01/git/#types-of-version-control-systems","title":"Types of Version Control Systems","text":"<ul> <li>Centralized: CVS, Perforce, SVN, TFS.</li> <li>Distributed: Git, Mercurial.</li> </ul>"},{"location":"month_01/week_01/git/#introduction-to-git","title":"Introduction to Git","text":"<ul> <li>A distributed version control system focusing on speed, integrity, and non-linear workflows.</li> <li>Created by Linus Torvalds in 2005 for Linux kernel development.</li> </ul>"},{"location":"month_01/week_01/git/#installing-git","title":"Installing Git","text":"<ul> <li>Linux: <code>apt-get install git</code> (Debian) / <code>yum install git</code> (Red Hat).</li> <li>Windows: Download from git-scm.com.</li> <li>Mac: Install via Homebrew.</li> </ul>"},{"location":"month_01/week_01/git/#git-configuration","title":"Git Configuration","text":"<ul> <li>Set user identity:   <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"your@email.com\"\n</code></pre></li> <li>Set default editor and view settings with <code>git config --list</code>.</li> </ul>"},{"location":"month_01/week_01/git/#basic-git-concepts","title":"Basic Git Concepts","text":"<ul> <li>Repository (.git): Stores all project history.</li> <li>Working Directory: Current state of project files.</li> <li>Commit: Snapshot of changes.</li> <li>Staging Area: Prepares changes before committing.</li> </ul>"},{"location":"month_01/week_01/git/#creating-cloning-repositories","title":"Creating &amp; Cloning Repositories","text":"<ul> <li>Create new repository: <pre><code>git init\n</code></pre></li> <li>Clone an existing repository: <pre><code>git clone &lt;URL&gt;\n</code></pre></li> </ul>"},{"location":"month_01/week_01/git/#ignoring-files","title":"Ignoring Files","text":"<ul> <li><code>.gitignore</code> prevents tracking unnecessary files like system files, build artifacts, and credentials.</li> </ul>"},{"location":"month_01/week_01/git/#key-git-commands","title":"Key Git Commands","text":"<ul> <li>Adding &amp; Committing:   <pre><code>git add &lt;file&gt;\ngit commit -m \"Commit message\"\n</code></pre></li> <li>Pushing &amp; Pulling:   <pre><code>git push\ngit fetch\ngit pull\n</code></pre></li> <li>Branching:   <pre><code>git branch &lt;name&gt;  # Create branch\ngit checkout &lt;name&gt;  # Switch branch\ngit branch -d &lt;name&gt;  # Delete branch\n</code></pre></li> </ul>"},{"location":"month_01/week_01/git/#git-workflow","title":"Git Workflow","text":"<ol> <li>Clone repository (<code>git clone</code>).</li> <li>Create/Switch branch (<code>git branch</code>, <code>git checkout</code>).</li> <li>Modify &amp; stage changes (<code>git add</code>).</li> <li>Review changes (<code>git status</code>, <code>git log</code>).</li> <li>Commit changes (<code>git commit</code>).</li> <li>Push changes (<code>git push</code>).</li> <li>Sync with remote (<code>git fetch</code>, <code>git pull</code>).</li> </ol>"},{"location":"month_01/week_01/git/#useful-resources","title":"Useful Resources","text":"<ul> <li>Git Book \ud83d\udcd6 \u2013 Official, in-depth guide covering everything from basics to advanced workflows. Best for structured learning.  </li> <li>Atlassian Git Tutorials \ud83c\udf93 \u2013 Practical, beginner-friendly step-by-step guides with real-world examples.  </li> <li>Try Git \u26a1 \u2013 Interactive, browser-based tutorial for quickly learning Git basics.  </li> <li>Learn Git Branching \ud83c\udf3f \u2013 Visual, hands-on exercises to master Git branching concepts.  </li> </ul>"},{"location":"month_01/week_01/jira/","title":"Tools: Jira and Confluence","text":""},{"location":"month_01/week_01/jira/#agenda","title":"Agenda","text":"<p>The document covers the tools Jira and Confluence, including their key functionalities:</p> <ol> <li>Jira as a Project Management Tool </li> <li>Overview  </li> <li>Issues, filtering, and dashboards  </li> <li> <p>GreenHopper extension  </p> </li> <li> <p>Confluence as a Team Collaboration Tool </p> </li> <li>Overview  </li> <li>Page management  </li> <li>Meeting notes  </li> <li>Macros, import/export  </li> <li>Additional features  </li> </ol>"},{"location":"month_01/week_01/jira/#jira-overview","title":"Jira Overview","text":"<p>Jira is a flexible project management tool that allows customization of workflows, integration with existing systems, and the addition of plugins. It is commonly used for:  </p> <ul> <li>Bug tracking for a single application  </li> <li>Managing software development across multiple products  </li> <li>Running multiple projects within a company  </li> </ul>"},{"location":"month_01/week_01/jira/#jira-terminology","title":"Jira Terminology","text":"<ul> <li>Project: A collection of issues, each identified by a name and key.  </li> <li>Issue: Represents different entities depending on the organization, such as a software bug, project task, helpdesk ticket, or product improvement.  </li> </ul>"},{"location":"month_01/week_01/jira/#jira-components-and-versions","title":"Jira Components and Versions","text":"<ul> <li>Components: Subsections of a project used to group issues into smaller parts.  </li> <li>Versions: Points-in-time in a project, used for release planning (e.g., application builds, sprints). Versions can have different statuses: Released, Unreleased, Archived, or Overdue.  </li> </ul>"},{"location":"month_01/week_01/jira/#jira-issues-and-types","title":"Jira Issues and Types","text":"<p>Jira issues represent logical pieces of a project's scope. There are two types of issues: parent and child (sub-issues). Each issue follows a workflow with different states and transitions.  </p> <ul> <li>Epic &amp; Story: Describe project scope within requirements management.  </li> <li>Task &amp; Technical Task: Represent generic project work, with technical tasks often related to specific functionalities.  </li> <li>Bug &amp; Sub-Bug: Describe problems affecting functionality, supporting Agile best practices.  </li> <li>Improvement, New Feature &amp; Risk: Used for documenting changes, feature requests, and risk analysis.  </li> </ul>"},{"location":"month_01/week_01/jira/#jira-workflow","title":"Jira Workflow","text":"<p>Issues move through different statuses (e.g., Open, In Progress, Resolved, Closed) via transitions (e.g., Start Progress, Resolve, Reopen).  </p>"},{"location":"month_01/week_01/jira/#filtering-and-dashboards","title":"Filtering and Dashboards","text":"<ul> <li>Simple Search: Basic issue search.  </li> <li>Advanced Search (JQL - Jira Query Language): SQL-like queries for complex filtering.  </li> <li>Quick Search: Fast issue lookup with minimal typing.  </li> <li>Issue Filters: Saved searches that can be displayed in dashboards and shared with others.  </li> <li>Dashboards: Provide visual information using gadgets, which display charts, reports, and team collaboration tools.  </li> </ul>"},{"location":"month_01/week_01/jira/#confluence-overview","title":"Confluence Overview","text":"<p>Confluence is an enterprise wiki designed to help teams share and collaborate efficiently.  </p> <ul> <li>Key Features:</li> <li>Create, share, and discuss ideas, files, and projects.  </li> <li>Reduce email and meetings for better efficiency.  </li> </ul>"},{"location":"month_01/week_01/jira/#confluence-terminology","title":"Confluence Terminology","text":"<ul> <li>Space: A collection of wiki pages.  </li> <li>Pages: Main content storage for documents, notes, and specifications.  </li> <li>Blog Posts: Used for announcements, status reports, or journal entries.  </li> <li>Comments: Remarks or questions added to pages.  </li> <li>Bookmarks: Links to external content.  </li> </ul>"},{"location":"month_01/week_01/jira/#page-management-in-confluence","title":"Page Management in Confluence","text":"<p>Users can:    - Create, edit, move, copy, and delete pages.    - Search content, export in PDF/Word/HTML/XML formats.    - Organize content using parent-child relationships.    - Collaborate via comments and view page history.  </p>"},{"location":"month_01/week_01/jira/#wiki-markup-in-confluence","title":"Wiki Markup in Confluence","text":"<ul> <li>Headings: <code>h1.</code>, <code>h2.</code> for different levels.  </li> <li>Lists: <code>-</code> for bullets, <code>#</code> for numbered lists.  </li> <li>Tables: <code>||heading 1||heading 2||heading 3||</code> for structured data representation.  </li> </ul>"},{"location":"month_01/week_01/jira/#conclusion","title":"Conclusion","text":"<p>The document provides an overview of Jira and Confluence, explaining their role in project management and team collaboration. Jira is primarily used for tracking tasks, bugs, and development, while Confluence is a documentation and collaboration tool that helps teams share information efficiently.</p>"},{"location":"month_01/week_02/","title":"2\ufe0f\u20e3 Week 2","text":"Topic Description Agile, Scrum, and Kanban Introduction to Agile methodologies, focusing on Scrum and Kanban frameworks. Learn how to manage projects efficiently, improve collaboration, and adapt to change. Networking Fundamentals of computer networking, including network architectures, protocols (TCP/IP, HTTP, DNS), IP addressing, and network security. Understand how devices communicate over local and global networks. OS Introduction to Operating Systems, covering key concepts such as process management, memory management, file systems, and user permissions. Learn the differences between Windows, Linux, and macOS."},{"location":"month_01/week_02/agile/","title":"Agile, Scrum, and Kanban","text":""},{"location":"month_01/week_02/agile/#introduction","title":"Introduction","text":"<p>This document covers key aspects of Agile methodologies, focusing on Scrum and Kanban. It also discusses the Software Development Lifecycle (SDLC) and its application in DevOps.</p>"},{"location":"month_01/week_02/agile/#software-development-lifecycle-sdlc","title":"Software Development Lifecycle (SDLC)","text":"<ul> <li>The Software Development Lifecycle (SDLC) is a process for building software systems in a structured way.</li> <li>It consists of multiple phases:<ul> <li>Planning</li> <li>Analysis</li> <li>Design</li> <li>Development</li> <li>Testing</li> <li>Deployment</li> <li>Operations &amp; Maintenance</li> </ul> </li> <li>SDLC can be implemented using different methodologies.</li> </ul>"},{"location":"month_01/week_02/agile/#sdlc-in-devops","title":"SDLC in DevOps","text":"<ul> <li>DevOps integrates SDLC with automation and continuous delivery practices.</li> <li>More details: What is DevOps?</li> </ul>"},{"location":"month_01/week_02/agile/#project-management-in-software-development","title":"Project Management in Software Development","text":"<ul> <li>Project management involves leading a team to meet specific project goals under given constraints (time, budget, scope).</li> <li>Various software project management methodologies exist:<ul> <li>Waterfall</li> <li>Spiral (RUP and others)</li> <li>V-Model</li> <li>eXtreme Programming (XP)</li> <li>Agile (Scrum, Kanban, etc.)</li> </ul> </li> <li>Agile methodologies have gained popularity due to their adaptability and iterative approach.</li> </ul>"},{"location":"month_01/week_02/agile/#agile-methodology","title":"Agile Methodology","text":"<p>Agile is based on the Agile Manifesto, which prioritizes: - Individuals and interactions over processes and tools. - Working software over comprehensive documentation. - Customer collaboration over contract negotiation. - Responding to change over following a plan.</p>"},{"location":"month_01/week_02/agile/#scrum-vs-kanban","title":"Scrum vs. Kanban","text":"<ul> <li>Scrum is a structured framework for iterative software development.</li> <li>Kanban is a lean workflow management method, suitable for continuous delivery and incremental improvements.</li> </ul>"},{"location":"month_01/week_02/agile/#kanban","title":"Kanban","text":""},{"location":"month_01/week_02/agile/#what-is-kanban","title":"What is Kanban?","text":"<ul> <li>A lean methodology that originated from the Toyota Production System (TPS).</li> <li>Designed for continuous workflow improvement in Agile and DevOps teams.</li> </ul>"},{"location":"month_01/week_02/agile/#key-kanban-practices","title":"Key Kanban Practices","text":"<ol> <li>Visualizing workflow (via a Kanban board).</li> <li>Limiting work in progress (WIP).</li> <li>Managing flow efficiently.</li> <li>Making process policies explicit.</li> <li>Implementing feedback loops.</li> <li>Improving collaboratively.</li> </ol>"},{"location":"month_01/week_02/agile/#kanban-board","title":"Kanban Board","text":"<ul> <li>A visual tool that tracks work items from To Do \u2192 In Progress \u2192 Done.</li> </ul>"},{"location":"month_01/week_02/agile/#scrum","title":"Scrum","text":""},{"location":"month_01/week_02/agile/#what-is-scrum","title":"What is Scrum?","text":"<ul> <li>A framework for managing complex product development.</li> <li>Introduced by Hirotaka Takeuchi and Ikujiro Nonaka (1986).</li> <li>Formalized by Ken Schwaber and Jeff Sutherland (1995).</li> <li>Standardized in the Scrum Guide (2009).</li> </ul>"},{"location":"month_01/week_02/agile/#scrum-pillars","title":"Scrum Pillars","text":"<ol> <li>Transparency \u2013 Everyone understands the work process.</li> <li>Inspection \u2013 Regularly assess progress.</li> <li>Adaptation \u2013 Adjust plans based on feedback.</li> </ol>"},{"location":"month_01/week_02/agile/#scrum-values","title":"Scrum Values","text":"<ul> <li>Commitment</li> <li>Focus</li> <li>Openness</li> <li>Respect</li> <li>Courage</li> </ul>"},{"location":"month_01/week_02/agile/#scrum-key-elements","title":"Scrum Key Elements","text":"<ul> <li>Roles</li> <li>Events</li> <li>Artifacts</li> </ul>"},{"location":"month_01/week_02/agile/#scrum-roles","title":"Scrum Roles","text":"<ol> <li>Developers</li> <li>Build the software.</li> <li>Maintain the Sprint Backlog.</li> <li> <p>Ensure adherence to the Definition of Done.</p> </li> <li> <p>Product Owner (PO)</p> </li> <li>Maximizes product value.</li> <li>Manages the Product Backlog.</li> <li> <p>Represents stakeholders.</p> </li> <li> <p>Scrum Master</p> </li> <li>Ensures effective Scrum adoption.</li> <li>Coaches the team on Agile principles.</li> <li>Serves the Product Owner, Developers, and Organization.</li> </ol>"},{"location":"month_01/week_02/agile/#scrum-events","title":"Scrum Events","text":""},{"location":"month_01/week_02/agile/#sprint","title":"Sprint","text":"<ul> <li>A time-boxed iteration (1 month or less) for development.</li> <li>Enables predictability and adaptability.</li> </ul>"},{"location":"month_01/week_02/agile/#sprint-planning","title":"Sprint Planning","text":"<ul> <li>Defines the work for the sprint.</li> <li>Covers:</li> <li>Why is this Sprint valuable?</li> <li>What can be done this Sprint?</li> <li>How will the work be accomplished?</li> <li>Common estimation techniques:<ul> <li>Planning Poker</li> <li>T-Shirt Sizes</li> <li>Bucket System</li> </ul> </li> </ul>"},{"location":"month_01/week_02/agile/#daily-scrum-daily-stand-up","title":"Daily Scrum (Daily Stand-up)","text":"<ul> <li>15-minute daily meeting.</li> <li>Focuses on:</li> <li>What was completed yesterday?</li> <li>What will be done today?</li> <li>Are there any blockers?</li> </ul>"},{"location":"month_01/week_02/agile/#sprint-review","title":"Sprint Review","text":"<ul> <li>Second to last event of the sprint.</li> <li>Demonstrates progress to stakeholders.</li> <li>Determines next steps.</li> </ul>"},{"location":"month_01/week_02/agile/#sprint-retrospective","title":"Sprint Retrospective","text":"<ul> <li>Final event of the sprint.</li> <li>Focuses on team improvement and workflow enhancements.</li> </ul>"},{"location":"month_01/week_02/agile/#event-time-boxes","title":"Event Time-Boxes","text":"Event 30 days 3 weeks 2 weeks 1 week Sprint Planning 8 hrs &lt;8 hrs &lt;8 hrs &lt;4 hrs Daily Scrum 15 min 15 min 15 min 15 min Sprint Review 4 hrs &lt;4 hrs &lt;4 hrs &lt;2 hrs Sprint Retrospective 3 hrs &lt;3 hrs &lt;3 hrs &lt;1.5 hrs"},{"location":"month_01/week_02/agile/#scrum-artifacts","title":"Scrum Artifacts","text":""},{"location":"month_01/week_02/agile/#product-backlog","title":"Product Backlog","text":"<ul> <li>An ordered list of all necessary features and tasks.</li> <li>Maintained by the Product Owner.</li> </ul>"},{"location":"month_01/week_02/agile/#sprint-backlog","title":"Sprint Backlog","text":"<ul> <li>Contains:</li> <li>Sprint Goal (why).</li> <li>Selected Product Backlog Items (what).</li> <li>Actionable plan (how).</li> <li>Maintained by Developers.</li> </ul>"},{"location":"month_01/week_02/agile/#product-backlog-items-pbis","title":"Product Backlog Items (PBIs)","text":"<ul> <li>Includes:<ul> <li>User Stories</li> <li>Feature Definitions</li> <li>Non-functional Requirements</li> <li>Constraints &amp; Bugs</li> </ul> </li> </ul>"},{"location":"month_01/week_02/agile/#user-stories","title":"User Stories","text":"<ul> <li>Short descriptions of user needs:   <pre><code>As a [role], I want [goal], so that [benefit].\n</code></pre></li> </ul>"},{"location":"month_01/week_02/agile/#increment","title":"Increment","text":"<ul> <li>A working piece of the product that delivers value.</li> <li>Must be usable and meet the Definition of Done.</li> </ul>"},{"location":"month_01/week_02/agile/#definition-of-done-dod","title":"Definition of Done (DoD)","text":"<ul> <li>Establishes quality standards.</li> <li>Ensures that completed work is shippable.</li> </ul>"},{"location":"month_01/week_02/agile/#scrum-with-remote-teams","title":"Scrum with Remote Teams","text":"<ul> <li>Remote work presents challenges such as:</li> <li>Communication gaps.</li> <li>Different time zones.</li> <li>Feeling of isolation.</li> <li>Knowledge fragmentation.</li> </ul>"},{"location":"month_01/week_02/agile/#best-practices","title":"Best Practices","text":"<ul> <li>Clear communication plan.</li> <li>Effective collaboration tools (e.g., Slack, Jira).</li> <li>Daily stand-ups to keep teams aligned.</li> <li>Well-defined Product Backlog.</li> <li>Encourage self-organization.</li> </ul>"},{"location":"month_01/week_02/agile/#useful-resources","title":"Useful Resources","text":"<ul> <li>Agile Manifesto</li> <li>Scrum Guide</li> <li>Scrum.org</li> <li>Scrum in Atlassian</li> <li>Kanban in Atlassian</li> </ul>"},{"location":"month_01/week_02/bash_exercise/","title":"Exercise 01: Bash Scripting Exercises","text":"<p>Do the exercises listed below. Each exercise must be done in a different <code>.sh</code> file (be sure that such files are executable). Please share the files in a GitHub repository and provide the repo URL via Discord (as a response to these messages).</p>"},{"location":"month_01/week_02/bash_exercise/#exercises","title":"\ud83d\udccc Exercises","text":""},{"location":"month_01/week_02/bash_exercise/#1-create-a-script","title":"1\ufe0f\u20e3 Create a Script","text":"<p>Write a Bash script that prints <code>\"Hello, Bash Scripting!\"</code> to the terminal.</p>"},{"location":"month_01/week_02/bash_exercise/#2-accept-user-input","title":"2\ufe0f\u20e3 Accept User Input","text":"<p>Write a script that prompts the user for their name and then prints: <code>Hello, &lt;name&gt;! Welcome to Bash scripting.</code></p>"},{"location":"month_01/week_02/bash_exercise/#3-check-if-a-file-exists","title":"3\ufe0f\u20e3 Check If a File Exists","text":"<p>Create a script that takes a filename as an argument and checks if the file exists. - If it does, print <code>\"File exists\"</code> - Otherwise, print <code>\"File does not exist\"</code></p>"},{"location":"month_01/week_02/bash_exercise/#4-list-files-in-a-directory","title":"4\ufe0f\u20e3 List Files in a Directory","text":"<p>Write a script that asks the user for a directory path and lists all the files in that directory.</p>"},{"location":"month_01/week_02/bash_exercise/#5-simple-calculator","title":"5\ufe0f\u20e3 Simple Calculator","text":"<p>Write a script that asks the user for two numbers and an operation (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>), then performs the calculation and displays the result.</p>"},{"location":"month_01/week_02/bash_exercise/#6-check-if-a-number-is-even-or-odd","title":"6\ufe0f\u20e3 Check If a Number is Even or Odd","text":"<p>Write a script that takes a number as input and prints whether it is even or odd.</p>"},{"location":"month_01/week_02/bash_exercise/#7-loop-through-a-list-of-files","title":"7\ufe0f\u20e3 Loop Through a List of Files","text":"<p>Create a script that prints the names of all <code>.txt</code> files in the current directory.</p>"},{"location":"month_01/week_02/bash_exercise/#8-rename-multiple-files","title":"8\ufe0f\u20e3 Rename Multiple Files","text":"<p>Write a script that renames all <code>.txt</code> files in a directory by adding a <code>_backup</code> suffix before the file extension. Example: <code>file.txt \u2192 file_backup.txt</code></p>"},{"location":"month_01/week_02/bash_exercise/#9-copy-and-move-files","title":"9\ufe0f\u20e3 Copy and Move Files","text":"<p>Write a script that moves all <code>.log</code> files from one directory to another. - The source and destination directories should be provided as arguments.</p>"},{"location":"month_01/week_02/bash_exercise/#check-disk-usage","title":"\ud83d\udd1f Check Disk Usage","text":"<p>Write a script that displays the current disk usage percentage and warns the user if it exceeds 80%.</p>"},{"location":"month_01/week_02/bash_exercise/#11-change-file-permissions","title":"1\ufe0f\u20e31\ufe0f\u20e3 Change File Permissions","text":"<p>Write a script that sets read, write, and execute permissions for the owner of all <code>.sh</code> files in a directory.</p>"},{"location":"month_01/week_02/bash_exercise/#12-find-large-files","title":"1\ufe0f\u20e32\ufe0f\u20e3 Find Large Files","text":"<p>Write a script that finds and lists all files in the current directory that are larger than 100MB.</p>"},{"location":"month_01/week_02/bash_exercise/#13-monitor-a-log-file-in-real-time","title":"1\ufe0f\u20e33\ufe0f\u20e3 Monitor a Log File in Real-Time","text":"<p>Use <code>tail -f</code> in a script to monitor a system log file (<code>/var/log/syslog</code> or <code>/var/log/auth.log</code>).</p>"},{"location":"month_01/week_02/bash_exercise/#14-extract-information-using-grep","title":"1\ufe0f\u20e34\ufe0f\u20e3 Extract Information Using grep","text":"<p>Write a script that extracts all lines containing <code>\"ERROR\"</code> from a log file.</p>"},{"location":"month_01/week_02/bash_exercise/#15-automate-a-backup","title":"1\ufe0f\u20e35\ufe0f\u20e3 Automate a Backup","text":"<p>Create a script that copies all <code>.conf</code> files from <code>/etc/</code> to a backup directory with a timestamp.</p>"},{"location":"month_01/week_02/bash_exercise/#16-count-word-occurrences-in-a-file","title":"1\ufe0f\u20e36\ufe0f\u20e3 Count Word Occurrences in a File","text":"<p>Write a script that counts how many times a specific word appears in a given text file.</p>"},{"location":"month_01/week_02/bash_exercise/#17-find-and-replace-text-in-a-file","title":"1\ufe0f\u20e37\ufe0f\u20e3 Find and Replace Text in a File","text":"<p>Write a script that replaces all occurrences of a specific word in a file with another word.</p>"},{"location":"month_01/week_02/bash_exercise/#18-delete-files-older-than-x-days","title":"1\ufe0f\u20e38\ufe0f\u20e3 Delete Files Older Than X Days","text":"<p>Write a script that deletes all files in a specified directory that are older than 7 days.</p>"},{"location":"month_01/week_02/bash_exercise/#19-monitor-cpu-usage","title":"1\ufe0f\u20e39\ufe0f\u20e3 Monitor CPU Usage","text":"<p>Create a script that continuously checks the CPU usage every 5 seconds and alerts the user if it exceeds 90%.</p>"},{"location":"month_01/week_02/bash_exercise/#20-schedule-a-cron-job","title":"2\ufe0f\u20e30\ufe0f\u20e3 Schedule a Cron Job","text":"<p>Write a script that sets up a cron job to run a backup script every day at midnight.</p> <p>\ud83d\udca1 Solutions: </p> <ul> <li>All solutions can be found in this folder \u2192 Link.  </li> </ul>"},{"location":"month_01/week_02/networking/","title":"Networking Basics","text":""},{"location":"month_01/week_02/networking/#introduction","title":"Introduction","text":""},{"location":"month_01/week_02/networking/#why-learn-computer-networking","title":"Why Learn Computer Networking?","text":"<p>Modern software applications are distributed systems, meaning they run across multiple networked devices. Every IT specialist needs a solid understanding of networking to work efficiently.</p>"},{"location":"month_01/week_02/networking/#understanding-networks","title":"Understanding Networks","text":""},{"location":"month_01/week_02/networking/#what-is-a-computer-network","title":"What is a Computer Network?","text":"<p>A computer network is a system of connected devices (computers, servers, routers, switches) that exchange data and resources.</p>"},{"location":"month_01/week_02/networking/#types-of-networks","title":"Types of Networks","text":"<ul> <li>Local Area Network (LAN) \u2013 Covers a small geographical area (e.g., home, office).</li> <li>Wide Area Network (WAN) \u2013 Covers large distances (e.g., the Internet).</li> <li>Wireless Networks (WLAN) \u2013 Uses radio waves instead of cables.</li> <li>Metropolitan Area Network (MAN) \u2013 Covers a city or large campus.</li> <li>Personal Area Network (PAN) \u2013 Connects devices close to an individual (e.g., Bluetooth).</li> </ul>"},{"location":"month_01/week_02/networking/#network-topologies","title":"Network Topologies","text":"<ul> <li>Star Topology \u2013 Devices connected to a central hub.</li> <li>Bus Topology \u2013 Single communication line; failure affects the whole network.</li> <li>Ring Topology \u2013 Devices connected in a closed loop.</li> <li>Mesh Topology \u2013 Devices are interconnected, providing redundancy.</li> </ul>"},{"location":"month_01/week_02/networking/#client-server-model","title":"Client-Server Model","text":"<p>A fundamental concept in networking where: - Client: Requests services (e.g., web browser, email app). - Server: Provides services (e.g., web server, database server).</p>"},{"location":"month_01/week_02/networking/#characteristics-of-a-client","title":"Characteristics of a Client","text":"<p>\u2714 Initiates network requests \u2714 Receives and processes responses \u2714 Connects to multiple servers simultaneously \u2714 Has a graphical user interface (GUI) for user interaction  </p>"},{"location":"month_01/week_02/networking/#characteristics-of-a-server","title":"Characteristics of a Server","text":"<p>\u2714 Waits for client requests \u2714 Processes and responds to client queries \u2714 Can manage resources, install/uninstall applications remotely  </p>"},{"location":"month_01/week_02/networking/#networking-protocols","title":"Networking Protocols","text":""},{"location":"month_01/week_02/networking/#what-is-a-protocol","title":"What is a Protocol?","text":"<p>A protocol is a set of rules that defines how data is transmitted and received over a network.</p>"},{"location":"month_01/week_02/networking/#common-protocols","title":"Common Protocols","text":"Protocol Purpose HTTP(S) Web browsing FTP File transfers DNS Converts domain names to IP addresses DHCP Assigns dynamic IP addresses SSL/TLS Encryption for secure communication SMTP, POP3, IMAP Email protocols"},{"location":"month_01/week_02/networking/#osi-vs-tcpip-models","title":"OSI vs. TCP/IP Models","text":"<p>Two conceptual models describe how data flows across networks.</p>"},{"location":"month_01/week_02/networking/#osi-model-7-layers","title":"OSI Model (7 Layers)","text":"<ol> <li>Application \u2013 User applications (HTTP, FTP, SMTP).</li> <li>Presentation \u2013 Data formatting, encryption (SSL/TLS).</li> <li>Session \u2013 Manages connections (e.g., logins, sessions).</li> <li>Transport \u2013 Reliable data transmission (TCP, UDP).</li> <li>Network \u2013 Routes data using IP addresses.</li> <li>Data Link \u2013 MAC addressing, switching (Ethernet, Wi-Fi).</li> <li>Physical \u2013 Hardware connections (cables, wireless signals).</li> </ol>"},{"location":"month_01/week_02/networking/#tcpip-model-4-layers","title":"TCP/IP Model (4 Layers)","text":"OSI Layer TCP/IP Equivalent Application Application Presentation \u274c (Included in Application) Session \u274c (Included in Application) Transport Transport (TCP, UDP) Network Internet (IP, ICMP, ARP) Data Link Network Access (Ethernet, Wi-Fi) Physical \u274c (Part of Network Access)"},{"location":"month_01/week_02/networking/#ip-addressing","title":"IP Addressing","text":""},{"location":"month_01/week_02/networking/#what-is-an-ip-address","title":"What is an IP Address?","text":"<p>An IP address is a unique identifier assigned to devices on a network.</p>"},{"location":"month_01/week_02/networking/#ipv4-vs-ipv6","title":"IPv4 vs. IPv6","text":"Feature IPv4 IPv6 Deployment 1981 1998 Address Size 32-bit 128-bit Example <code>192.168.1.1</code> <code>2001:db8::ff00:42:8329</code> Number of Addresses ~4.3 billion 340 undecillion (10\u00b3\u2076)"},{"location":"month_01/week_02/networking/#special-ip-addresses","title":"Special IP Addresses","text":"<ul> <li>0.0.0.0 \u2013 Default network.</li> <li>127.0.0.1 \u2013 Loopback (localhost).</li> <li>192.168.x.x, 10.x.x.x \u2013 Private networks.</li> <li>255.255.255.255 \u2013 Broadcast.</li> </ul>"},{"location":"month_01/week_02/networking/#mac-address-vs-ip-address","title":"MAC Address vs. IP Address","text":"Feature MAC Address IP Address Purpose Identifies device hardware Identifies device location on the network Format <code>1A:2B:3C:4D:5E:6F</code> <code>192.168.1.1</code> Used in Data Link Layer Network Layer"},{"location":"month_01/week_02/networking/#ports-communication","title":"Ports &amp; Communication","text":""},{"location":"month_01/week_02/networking/#what-is-a-port","title":"What is a Port?","text":"<p>A port is a logical endpoint for communication between devices.</p>"},{"location":"month_01/week_02/networking/#port-number-ranges","title":"Port Number Ranges","text":"Range Description 0 \u2013 1023 Well-Known Ports (HTTP, FTP, SSH) 1024 \u2013 49151 Registered Ports 49152 \u2013 65535 Dynamic/Private Ports"},{"location":"month_01/week_02/networking/#common-ports","title":"Common Ports","text":"Port Protocol 20/21 FTP (File Transfer) 22 SSH (Secure Shell) 25 SMTP (Email) 53 DNS (Domain Name System) 80 HTTP (Web Browsing) 443 HTTPS (Secure Web Browsing)"},{"location":"month_01/week_02/networking/#network-media","title":"Network Media","text":""},{"location":"month_01/week_02/networking/#types-of-transmission-media","title":"Types of Transmission Media","text":"<ol> <li>Wired Connections</li> <li>Twisted Pair (Ethernet) \u2013 Common in LANs.</li> <li>Fiber Optic \u2013 High-speed, long-distance communication.</li> <li>Wireless Connections</li> <li>Wi-Fi \u2013 Wireless LAN.</li> <li>Infrared \u2013 Short-range data transfer.</li> <li>Satellite \u2013 Long-range communication.</li> </ol>"},{"location":"month_01/week_02/networking/#networking-devices","title":"Networking Devices","text":"Device Function Router Directs traffic between networks (e.g., home network to the internet). Switch Connects multiple devices within the same network. Modem Converts digital data to analog for internet access. Firewall Protects networks by filtering traffic. Server Stores and provides data to clients."},{"location":"month_01/week_02/networking/#vlan-virtual-local-area-networks","title":"VLAN (Virtual Local Area Networks)","text":"<ul> <li>VLANs create isolated network segments within a larger network.</li> <li>Use IEEE 802.1Q standard.</li> <li>Improves network efficiency and security.</li> </ul>"},{"location":"month_01/week_02/networking/#summary","title":"Summary","text":"<ul> <li>Networking is essential for modern IT professionals.</li> <li>Protocols define rules for communication.</li> <li>TCP/IP is the foundation of the Internet.</li> <li>IP addresses &amp; MAC addresses help identify devices.</li> <li>Ports &amp; protocols enable communication between applications.</li> <li>Network devices like routers, switches, and servers manage data traffic.</li> </ul>"},{"location":"month_01/week_02/os/","title":"Introduction to Operating Systems and Linux","text":""},{"location":"month_01/week_02/os/#introduction","title":"Introduction","text":"<p>This document provides an introduction to Operating Systems (OS), focusing on the Linux OS and its comparison with Windows. It covers essential topics such as OS functions, directory structure, command-line usage, user management, and system permissions.</p>"},{"location":"month_01/week_02/os/#topics-covered","title":"Topics Covered","text":"<ul> <li>Operating System Functions</li> <li>Linux OS Family</li> <li>Why Linux?</li> <li>History of Linux</li> <li>Key Differences Between Linux &amp; Windows</li> <li>Directory Structure</li> <li>Essential Commands</li> <li>Programs: Installation &amp; Execution</li> <li>Pipes &amp; I/O Redirection</li> <li>User &amp; Group Management</li> <li>File Ownership &amp; Permissions</li> <li>Virtualization Concepts</li> </ul>"},{"location":"month_01/week_02/os/#key-concepts","title":"Key Concepts","text":""},{"location":"month_01/week_02/os/#operating-systems","title":"Operating Systems","text":"<ul> <li>An OS manages hardware and software resources.</li> <li>Examples: Windows, Linux, macOS.</li> </ul>"},{"location":"month_01/week_02/os/#windows-os","title":"Windows OS","text":"<ul> <li>Graphical User Interface (GUI)-focused.</li> <li>Command-line interface available via Command Prompt and PowerShell.</li> <li>Common commands:</li> <li><code>dir</code> (list files)</li> <li><code>cd</code> (change directory)</li> <li><code>copy</code>, <code>move</code>, <code>del</code> (file management)</li> </ul>"},{"location":"month_01/week_02/os/#linux-os","title":"Linux OS","text":"<ul> <li>Open-source, widely used in servers and supercomputers.</li> <li>Introduced in 1991 by Linus Torvalds.</li> <li>Uses a hierarchical directory structure:</li> <li><code>/</code> (root)</li> <li><code>/bin/</code> (essential system commands)</li> <li><code>/home/</code> (user directories)</li> <li><code>/var/</code> (system logs and dynamic data)</li> </ul>"},{"location":"month_01/week_02/os/#command-line-interface-cli","title":"Command-Line Interface (CLI)","text":"<ul> <li>The terminal is the main interface for Linux operations.</li> <li>Essential commands:</li> <li><code>ls</code> (list files)</li> <li><code>cd</code> (navigate directories)</li> <li><code>mkdir</code> (create directories)</li> <li><code>rm</code> (remove files)</li> <li><code>sudo</code> (run commands as administrator)</li> <li><code>man &lt;command&gt;</code> (view command manual)</li> </ul>"},{"location":"month_01/week_02/os/#user-group-management","title":"User &amp; Group Management","text":"<ul> <li>Users and groups control access to system resources.</li> <li>Important commands:</li> <li><code>id</code> (show user ID and groups)</li> <li><code>usermod</code> (modify user accounts)</li> <li><code>passwd</code> (set/change passwords)</li> <li><code>groupadd</code> (create groups)</li> <li><code>chown</code> (change file ownership)</li> </ul>"},{"location":"month_01/week_02/os/#file-permissions-ownership","title":"File Permissions &amp; Ownership","text":"<ul> <li>File access is controlled using read (r), write (w), and execute (x) permissions.</li> <li>Modify permissions using:</li> <li><code>chmod</code> (change file permissions)</li> <li><code>chown</code> (change file owner)</li> <li><code>ls -l</code> (view file permissions)</li> </ul>"},{"location":"month_01/week_02/os/#pipes-io-redirection","title":"Pipes &amp; I/O Redirection","text":"<ul> <li>Pipes (<code>|</code>) pass the output of one command as input to another.</li> <li>Example: <code>ls | grep myfile</code></li> <li>Redirection (<code>&gt;</code>, <code>&gt;&gt;</code>) saves output to a file.</li> <li>Example: <code>uname -a &gt; systeminfo.txt</code></li> </ul>"},{"location":"month_01/week_02/os/#program-installation","title":"Program Installation","text":"<ul> <li>Linux software is installed via package managers:</li> <li>Debian-based (Ubuntu, Debian): <code>apt</code></li> <li>RedHat-based (Fedora, CentOS): <code>yum</code></li> <li>Executable files in Linux require the <code>x</code> permission.</li> </ul>"},{"location":"month_01/week_02/os/#conclusion","title":"Conclusion","text":"<p>This document introduces the fundamentals of operating systems, emphasizing Linux commands, user management, and file permissions. Understanding these concepts helps in efficient system administration and navigation of both Windows and Linux environments.</p>"},{"location":"month_01/week_03/","title":"3\ufe0f\u20e3 Week 3","text":"Topic Description Bash Introduction to Bash scripting, including basic commands, scripting syntax, loops, conditionals, and automation techniques."},{"location":"month_01/week_03/bash/","title":"Introduction to Bash","text":""},{"location":"month_01/week_03/bash/#linux-shells-overview","title":"Linux Shells Overview","text":"<p>Linux provides various shells, including: - Bourne Shell (<code>sh</code>) - C Shell (<code>csh</code>) - Korn Shell (<code>ksh</code>) - TC Shell (<code>tcsh</code>) - Bourne Again Shell (<code>bash</code>) - Z Shell (<code>zsh</code>)</p> <p>Bash is the most popular shell, offering features from Korn Shell and C Shell while conforming to the IEEE POSIX P1003.2/ISO 9945.2 Shell and Tools standard.</p>"},{"location":"month_01/week_03/bash/#bash-syntax","title":"Bash Syntax","text":"<ul> <li>Uses Latin alphabet, Arabic digits, punctuation symbols, and some keywords.</li> <li>Scripts begin with <code>#!/bin/bash</code> to indicate they are executable scripts.</li> </ul>"},{"location":"month_01/week_03/bash/#variables-in-bash","title":"Variables in Bash","text":"<ul> <li>Variables are always stored as strings but can be converted for calculations.</li> <li>No need to declare variables; assignment automatically creates them.</li> <li>String data with spaces or special characters must be enclosed in quotes.</li> <li>Double quotes allow variable expansion.</li> <li>Single quotes prevent variable expansion.</li> </ul>"},{"location":"month_01/week_03/bash/#environmental-variables","title":"Environmental Variables","text":"<ul> <li>Two types:</li> <li>Local Variables (specific to the script/session)</li> <li>Environmental Variables (system-wide, found via <code>env</code> command)</li> <li>Common environmental variables:</li> <li><code>PATH</code>: Directories searched for commands.</li> <li><code>HOSTNAME</code>: System name.</li> <li><code>USER</code>, <code>LOGNAME</code>: Current logged-in user.</li> <li><code>PWD</code>: Current working directory.</li> <li><code>SHELL</code>: Path to the current shell.</li> </ul>"},{"location":"month_01/week_03/bash/#special-variables","title":"Special Variables","text":"<ul> <li><code>$0</code>: Script name.</li> <li><code>$1-$9</code>: Positional parameters.</li> <li><code>$#</code>: Number of parameters.</li> <li><code>$*</code>, <code>$@</code>: All parameters.</li> <li><code>$?</code>: Return status of last command.</li> <li><code>$$</code>: Process ID of the script.</li> </ul>"},{"location":"month_01/week_03/bash/#command-substitution","title":"Command Substitution","text":"<ul> <li>Uses backticks `command` or <code>$(command)</code> to store command output into variables.</li> </ul>"},{"location":"month_01/week_03/bash/#arithmetic-evaluation","title":"Arithmetic Evaluation","text":"<ul> <li><code>let</code>, <code>$[expression]</code>, and <code>$((expression))</code> allow basic arithmetic.</li> <li>Bash does not support floating point calculations.</li> </ul>"},{"location":"month_01/week_03/bash/#conditional-statements","title":"Conditional Statements","text":"<ul> <li>Supports <code>if</code>, <code>elif</code>, <code>else</code>, and <code>fi</code>.</li> <li>Comparisons:</li> <li>Strings: <code>=</code>, <code>!=</code>, <code>-n</code>, <code>-z</code>.</li> <li>Numbers: <code>-eq</code>, <code>-ne</code>, <code>-gt</code>, <code>-lt</code>, <code>-ge</code>, <code>-le</code>.</li> <li>File operations: <code>-f</code>, <code>-d</code>, <code>-r</code>, <code>-w</code>, <code>-x</code>.</li> </ul>"},{"location":"month_01/week_03/bash/#loops-and-control-structures","title":"Loops and Control Structures","text":"<ul> <li><code>while</code>, <code>until</code>, and <code>for</code> loops.</li> <li><code>case</code> statements for pattern matching.</li> <li>Example:   <pre><code>for file in /etc/*; do\n  echo \"$file\"\ndone\n</code></pre></li> </ul>"},{"location":"month_01/week_03/bash/#arrays","title":"Arrays","text":"<ul> <li>Bash arrays store multiple values indexed numerically.   <pre><code>myArray=(apple orange banana)\necho ${myArray[1]} # Outputs \"orange\"\n</code></pre></li> </ul>"},{"location":"month_01/week_03/bash/#string-operations","title":"String Operations","text":"<ul> <li>String length: <code>${#var}</code>.</li> <li>String extraction: <code>expr substr</code>.</li> <li>Find and replace: <code>${var/find/replace}</code>.</li> </ul>"},{"location":"month_01/week_03/bash/#functions-in-bash","title":"Functions in Bash","text":"<ul> <li>Defined using <code>function name {}</code> or <code>name() {}</code>.</li> <li>Example:   <pre><code>my_function() {\n  echo \"Hello, Bash!\"\n}\nmy_function\n</code></pre></li> </ul>"},{"location":"month_01/week_03/bash/#regular-expressions","title":"Regular Expressions","text":"<ul> <li>Bash supports regex comparison with <code>=~</code> operator.   <pre><code>if [[ $var =~ [0-9]+ ]]; then echo \"Contains numbers\"; fi\n</code></pre></li> </ul>"},{"location":"month_01/week_03/bash/#case-studies","title":"Case Studies","text":"<ol> <li>Count lines in a file: <pre><code>i=1\nwhile read line; do\n  echo \"$i : $line\"\n  i=$((i+1))\ndone &lt; file.txt\n</code></pre></li> <li>Check if a file exists: <pre><code>if [ -f \"file.txt\" ]; then echo \"File exists\"; fi\n</code></pre></li> <li>Display system info: <pre><code>echo \"Date: $(date)\"\necho \"Uptime: $(uptime)\"\n</code></pre></li> </ol>"},{"location":"month_01/week_03/bash/#references","title":"References","text":"<ul> <li>GNU Bash Manual</li> </ul>"},{"location":"month_01/week_03/bash_exercise/","title":"Exercise 01: Grep and Regex Exercises","text":"<p>Do the exercises listed below. Each exercise must be done in a different <code>.sh</code> file (be sure that such files are executable). Please share the files in a GitHub repository and then share the repo URL via Discord (as responses to these messages).</p>"},{"location":"month_01/week_03/bash_exercise/#exercises","title":"\ud83d\udccc Exercises","text":""},{"location":"month_01/week_03/bash_exercise/#1-simple-pattern-search","title":"1\ufe0f\u20e3 Simple Pattern Search","text":"<p>Write a script using <code>grep</code> to find all lines containing the word \"Linux\" in a text file.</p>"},{"location":"month_01/week_03/bash_exercise/#2-case-insensitive-search","title":"2\ufe0f\u20e3 Case-Insensitive Search","text":"<p>Create a script using <code>grep</code> to find occurrences of \"bash\", ignoring case.</p>"},{"location":"month_01/week_03/bash_exercise/#3-count-matches","title":"3\ufe0f\u20e3 Count Matches","text":"<p>Use <code>grep</code> to count how many times the word \"error\" appears in a log file.</p>"},{"location":"month_01/week_03/bash_exercise/#4-search-multiple-files","title":"4\ufe0f\u20e3 Search Multiple Files","text":"<p>Write a script using <code>grep</code> to search for the word \"warning\" across multiple <code>.log</code> files in a directory.</p>"},{"location":"month_01/week_03/bash_exercise/#5-invert-match","title":"5\ufe0f\u20e3 Invert Match","text":"<p>Use <code>grep</code> to display all lines that do not contain the word \"success\" in a log file.</p>"},{"location":"month_01/week_03/bash_exercise/#6-search-using-wildcards","title":"6\ufe0f\u20e3 Search Using Wildcards","text":"<p>Create a script that finds all words starting with \"auto\" (like automate, automatic, automobile) in a given file.</p>"},{"location":"month_01/week_03/bash_exercise/#7-match-whole-words-only","title":"7\ufe0f\u20e3 Match Whole Words Only","text":"<p>Write a script that finds all lines containing exactly the word \"root\" (excluding words like uprooted or roots).</p>"},{"location":"month_01/week_03/bash_exercise/#8-display-line-numbers","title":"8\ufe0f\u20e3 Display Line Numbers","text":"<p>Use <code>grep</code> to print matching lines along with their line numbers.</p>"},{"location":"month_01/week_03/bash_exercise/#9-find-files-with-specific-content","title":"9\ufe0f\u20e3 Find Files with Specific Content","text":"<p>Write a script using <code>grep</code> to list all filenames containing the word \"script\" in their content.</p>"},{"location":"month_01/week_03/bash_exercise/#pipe-with-grep","title":"\ud83d\udd1f Pipe with Grep","text":"<p>Write a script that lists running processes (<code>ps aux</code>) and uses <code>grep</code> to display only processes owned by a specific user.</p>"},{"location":"month_01/week_03/bash_exercise/#11-regex-character-classes","title":"1\ufe0f\u20e31\ufe0f\u20e3 Regex Character Classes","text":"<p>Use <code>grep</code> to display all lines containing any number (digit) from a file.</p>"},{"location":"month_01/week_03/bash_exercise/#12-regex-repetition","title":"1\ufe0f\u20e32\ufe0f\u20e3 Regex Repetition","text":"<p>Write a script to find all lines containing at least two consecutive spaces.</p>"},{"location":"month_01/week_03/bash_exercise/#13-anchors-in-regex","title":"1\ufe0f\u20e33\ufe0f\u20e3 Anchors in Regex","text":"<p>Use <code>grep</code> to find all lines starting with \"ERROR\".</p>"},{"location":"month_01/week_03/bash_exercise/#14-find-emails-using-regex","title":"1\ufe0f\u20e34\ufe0f\u20e3 Find Emails Using Regex","text":"<p>Write a script using <code>grep</code> to extract all email addresses from a given file.</p>"},{"location":"month_01/week_03/bash_exercise/#15-extract-ip-addresses","title":"1\ufe0f\u20e35\ufe0f\u20e3 Extract IP Addresses","text":"<p>Create a script to extract all valid IPv4 addresses from a log file using <code>grep</code> and regex.</p>"},{"location":"month_01/week_03/bash_exercise/#16-search-for-urls","title":"1\ufe0f\u20e36\ufe0f\u20e3 Search for URLs","text":"<p>Write a script that uses <code>grep</code> to extract URLs (e.g., <code>http</code> or <code>https</code>) from a document.</p>"},{"location":"month_01/week_03/bash_exercise/#17-find-dates-in-specific-format","title":"1\ufe0f\u20e37\ufe0f\u20e3 Find Dates in Specific Format","text":"<p>Use <code>grep</code> to extract all dates matching the format <code>YYYY-MM-DD</code> from a file.</p>"},{"location":"month_01/week_03/bash_exercise/#18-regex-alternation","title":"1\ufe0f\u20e38\ufe0f\u20e3 Regex Alternation","text":"<p>Write a script that finds lines containing either \"failed\" or \"denied\" using regex alternation.</p>"},{"location":"month_01/week_03/bash_exercise/#19-using-extended-regex","title":"1\ufe0f\u20e39\ufe0f\u20e3 Using Extended Regex","text":"<p>Write a script using <code>grep -E</code> to find all lines containing words that have three or more consecutive vowels.</p>"},{"location":"month_01/week_03/bash_exercise/#20-combine-grep-with-other-commands","title":"2\ufe0f\u20e30\ufe0f\u20e3 Combine Grep with Other Commands","text":"<p>Create a script that lists the 5 most recent logins (<code>last</code>) and filters entries using <code>grep</code> to display only logins from a particular user or IP address.</p> <p>\ud83d\udca1 Solutions: </p> <ul> <li>All solutions can be found in this folder \u2192 Link.  </li> </ul>"},{"location":"month_01/week_03/python_exercise/","title":"Exercise 02: Flask Project","text":""},{"location":"month_01/week_03/python_exercise/#step-1-create-a-github-repository","title":"Step 1: Create a GitHub Repository","text":"<ol> <li>Go to GitHub and create a new repository named <code>flask-demo</code>.</li> <li>Initialize the repository with a <code>README.md</code> file.</li> <li>Add a <code>.gitignore</code> file and select the <code>Python</code> template.</li> <li>Clone the repository to your local machine:    <pre><code>git clone https://github.com/YOUR_USERNAME/flask-demo.git\ncd flask-demo\n</code></pre></li> </ol>"},{"location":"month_01/week_03/python_exercise/#step-2-set-up-a-virtual-environment","title":"Step 2: Set Up a Virtual Environment","text":"<ol> <li>Create a virtual environment:    <pre><code>python -m venv venv\n</code></pre></li> <li>Activate the virtual environment:</li> <li>On macOS/Linux:      <pre><code>source venv/bin/activate\n</code></pre></li> <li>On Windows:      <pre><code>venv\\Scripts\\activate\n</code></pre></li> <li>Verify the virtual environment is active:    <pre><code>which python  # macOS/Linux\nwhere python   # Windows\n</code></pre></li> </ol>"},{"location":"month_01/week_03/python_exercise/#step-3-install-flask-and-create-requirementstxt","title":"Step 3: Install Flask and Create <code>requirements.txt</code>","text":"<ol> <li>Install Flask:    <pre><code>pip install flask\n</code></pre></li> <li>Generate a <code>requirements.txt</code> file:    <pre><code>pip freeze &gt; requirements.txt\n</code></pre></li> <li>Add and commit the file:    <pre><code>git add requirements.txt\ngit commit -m \"Added Flask dependencies\"\n</code></pre></li> </ol>"},{"location":"month_01/week_03/python_exercise/#step-4-create-a-simple-flask-app","title":"Step 4: Create a Simple Flask App","text":"<ol> <li>Create a new file called <code>app.py</code>:    <pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return \"Hello, Flask!\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre></li> <li>Run the Flask app:    <pre><code>python app.py\n</code></pre></li> <li>Open a browser and go to http://127.0.0.1:5000/ to see the message.</li> </ol>"},{"location":"month_01/week_03/python_exercise/#step-5-commit-and-push-to-github","title":"Step 5: Commit and Push to GitHub","text":"<ol> <li>Add the new files:    <pre><code>git add app.py\ngit commit -m \"Added simple Flask app\"\n</code></pre></li> <li>Push the changes:    <pre><code>git push origin main\n</code></pre></li> </ol>"},{"location":"month_01/week_03/python_exercise/#step-6-share-and-deploy","title":"Step 6: Share and Deploy","text":"<ul> <li>You can now share your repository with others.</li> <li>Optionally, you can deploy the app using platforms like Heroku, Render, or Railway.</li> </ul> <p>\ud83d\udca1 Solutions: </p> <ul> <li>All solutions can be found in this folder \u2192 Link.  </li> </ul>"},{"location":"month_01/week_03/02_exercises/","title":"Flask Demo","text":"<p>This repository contains a simple Flask application to demonstrate how to use virtual environments and GitHub for Python projects.</p>"},{"location":"month_01/week_03/02_exercises/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python (3.8 or later)</li> <li>Git</li> </ul>"},{"location":"month_01/week_03/02_exercises/#setup-instructions","title":"Setup Instructions","text":""},{"location":"month_01/week_03/02_exercises/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/YOUR_USERNAME/flask-demo.git\ncd flask-demo\n</code></pre>"},{"location":"month_01/week_03/02_exercises/#2-create-and-activate-a-virtual-environment","title":"2. Create and Activate a Virtual Environment","text":""},{"location":"month_01/week_03/02_exercises/#on-macoslinux","title":"On macOS/Linux:","text":"<pre><code>python -m venv venv\nsource venv/bin/activate\n</code></pre>"},{"location":"month_01/week_03/02_exercises/#on-windows","title":"On Windows:","text":"<pre><code>python -m venv venv\nvenv\\Scripts\\activate\n</code></pre>"},{"location":"month_01/week_03/02_exercises/#3-install-dependencies","title":"3. Install Dependencies","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"month_01/week_03/02_exercises/#4-run-the-flask-application","title":"4. Run the Flask Application","text":"<p><pre><code>python app.py\n</code></pre> By default, the app runs on http://127.0.0.1:5000/.</p>"},{"location":"month_01/week_03/02_exercises/#project-structure","title":"Project Structure","text":"<pre><code>flask-demo/\n\u2502\u2500\u2500 app.py            # Main Flask application\n\u2502\u2500\u2500 requirements.txt  # Python dependencies\n\u2502\u2500\u2500 .gitignore        # Files to ignore in Git\n\u2502\u2500\u2500 README.md         # Project documentation\n\u2514\u2500\u2500 venv/             # Virtual environment (not committed)\n</code></pre>"},{"location":"month_01/week_03/02_exercises/app/","title":"App","text":"In\u00a0[\u00a0]: Copied! <pre>from flask import Flask\n</pre> from flask import Flask In\u00a0[\u00a0]: Copied! <pre>app = Flask(__name__)\n</pre> app = Flask(__name__) In\u00a0[\u00a0]: Copied! <pre>@app.route('/')\ndef home():\n    return \"Hello, Flask!\"\n</pre> @app.route('/') def home():     return \"Hello, Flask!\" In\u00a0[\u00a0]: Copied! <pre>if __name__ == '__main__':\n    app.run(debug=True)\n</pre> if __name__ == '__main__':     app.run(debug=True)"},{"location":"month_01/week_04/","title":"4\ufe0f\u20e3 Week 4","text":"Topic Description docker Introduction to Docker, containers, images, volumes, and networks. Creating containers from images, managing containers with <code>docker run</code>, <code>docker ps</code>, <code>docker stop</code>, and <code>docker rm</code>. Using a <code>Dockerfile</code> to build custom images."},{"location":"month_01/week_04/docker/","title":"Docker and Containers","text":""},{"location":"month_01/week_04/docker/#containers-introduction","title":"Containers Introduction","text":""},{"location":"month_01/week_04/docker/#problems-with-traditional-servers","title":"\u274c Problems with Traditional Servers","text":"<ul> <li>One application per dedicated server</li> <li>Physical servers required</li> <li>Operating system licenses may be needed</li> <li>Underutilization of server resources</li> <li>Many other challenges...</li> </ul>"},{"location":"month_01/week_04/docker/#solution-virtualization","title":"\u2705 Solution: Virtualization","text":"<ul> <li>Use of Hypervisors to create virtual machines:</li> <li>KVM</li> <li>Xen</li> <li>VMware</li> <li>Oracle VirtualBox</li> <li>...</li> </ul>"},{"location":"month_01/week_04/docker/#the-main-value-for-customers","title":"\ud83c\udfaf The Main Value for Customers","text":"<ul> <li>It\u2019s the application that matters!</li> <li>The operating system itself does not add business value.</li> </ul>"},{"location":"month_01/week_04/docker/#problems-with-virtual-machines-vms","title":"\u274c Problems with Virtual Machines (VMs)","text":"<ul> <li>Operating system does not contribute directly to business value.</li> <li>The OS consumes a significant amount of VM resources.</li> </ul>"},{"location":"month_01/week_04/docker/#what-are-containers","title":"\ud83d\udce6 What Are Containers?","text":"<ul> <li>Containers are lighter than virtual machines.</li> <li>They consume less CPU, RAM, and disk space.</li> <li>Containers are an OS feature in UNIX-like systems.</li> </ul>"},{"location":"month_01/week_04/docker/#containers-in-linux","title":"\ud83d\udda5\ufe0f Containers in Linux","text":"<ul> <li>Use fewer resources compared to VMs.</li> <li>Improve efficiency by isolating applications.</li> </ul>"},{"location":"month_01/week_04/docker/#how-containers-work","title":"\u2699\ufe0f How Containers Work","text":"<ul> <li>Sometimes, applications need different versions of the same library.</li> <li>Containers solve dependency conflicts by providing isolated environments.</li> </ul>"},{"location":"month_01/week_04/docker/#kernel-features-for-containers","title":"\ud83d\udee0\ufe0f Kernel Features for Containers","text":"<ul> <li>Namespaces (process isolation):</li> <li><code>PID</code> \u2013 process isolation</li> <li><code>MNT</code> \u2013 file system isolation</li> <li><code>NET</code> \u2013 network isolation</li> <li><code>USER</code> \u2013 user privilege isolation</li> <li>Control Groups (cgroups) \u2013 group resources and set limits.</li> <li>Capabilities \u2013 control privileges.</li> </ul>"},{"location":"month_01/week_04/docker/#containerization","title":"\ud83d\udea2 Containerization","text":"<ul> <li>Achieved through platforms like Docker and Kubernetes.</li> <li>Uses technologies like Linux Containers (LXC) and containerd.</li> </ul>"},{"location":"month_01/week_04/docker/#key-features-of-containerization","title":"\ud83d\udd11 Key Features of Containerization","text":"<ol> <li>Isolation</li> <li>Portability</li> <li>Efficiency</li> <li>Reproducibility</li> <li>Scalability</li> </ol>"},{"location":"month_01/week_04/docker/#docker-introduction","title":"Docker Introduction","text":""},{"location":"month_01/week_04/docker/#what-is-docker","title":"\ud83d\udc33 What is Docker?","text":"<ul> <li>A set of PaaS (Platform as a Service) products.</li> <li>Uses OS-level virtualization to deliver software in containers.</li> </ul>"},{"location":"month_01/week_04/docker/#why-use-docker","title":"\ud83e\udd14 Why Use Docker?","text":"<ul> <li>Isolation \u2013 Keeps applications separate.</li> <li>Lightweight \u2013 Uses fewer resources than VMs.</li> <li>Simplicity \u2013 Easy to set up and use.</li> <li>Workflow \u2013 Streamlines development and deployment.</li> <li>Community \u2013 Large ecosystem of support.</li> </ul>"},{"location":"month_01/week_04/docker/#docker-structure","title":"\ud83c\udfd7\ufe0f Docker Structure","text":""},{"location":"month_01/week_04/docker/#docker-engine","title":"\ud83d\udd27 Docker Engine","text":"<ul> <li>Client-server application that builds and runs containers.</li> <li>REST API enables communication between Docker Client and Docker Daemon.</li> </ul>"},{"location":"month_01/week_04/docker/#docker-terminology","title":"\ud83d\udcd6 Docker Terminology","text":"<ul> <li>Docker Container \u2013 An encapsulated application with all dependencies, sharing the host OS kernel.</li> <li>Docker Image \u2013 A template for creating containers, containing all necessary configurations.</li> <li>Registry \u2013 A repository storing Docker images (e.g., Docker Hub).</li> </ul>"},{"location":"month_01/week_04/docker/#installing-docker","title":"\ud83c\udfd7\ufe0f Installing Docker","text":"<p>\ud83d\udd17 Official Documentation: - Docker Installation for Ubuntu - Digital Ocean Guide</p>"},{"location":"month_01/week_04/docker/#docker-engine-commands","title":"\u26a1 Docker Engine Commands","text":""},{"location":"month_01/week_04/docker/#docker-images","title":"\ud83d\udcdc Docker Images","text":"<ul> <li>Built from a series of layers.</li> <li>Created using Dockerfile.</li> <li>Not a filesystem, but a compressed archive (tar file).</li> </ul>"},{"location":"month_01/week_04/docker/#dockerfile","title":"\ud83d\udcdd Dockerfile","text":"<ul> <li>Automates image creation using a script-like format.</li> <li>Extends from a Base Image.</li> <li>Example: <pre><code># Base image\nFROM ubuntu:latest\n# Install dependencies\nRUN apt-get update &amp;&amp; apt-get install -y python3\n# Set working directory\nWORKDIR /app\n</code></pre></li> </ul>"},{"location":"month_01/week_04/docker/#docker-instructions","title":"\ud83d\udee0\ufe0f Docker Instructions","text":"<ul> <li><code>FROM</code> \u2013 Defines the base image.</li> <li><code>RUN</code> \u2013 Executes commands inside the container.</li> <li><code>CMD</code> \u2013 Specifies the default command.</li> <li><code>COPY</code> / <code>ADD</code> \u2013 Copies files from the host to the container.</li> <li><code>EXPOSE</code> \u2013 Specifies the port the container listens on.</li> <li><code>ENTRYPOINT</code> \u2013 Defines the main command for the container.</li> </ul> <p>\ud83d\udd17 Complete Dockerfile Reference</p>"},{"location":"month_01/week_04/docker/#creating-and-running-docker-containers","title":"\ud83c\udfd7\ufe0f Creating and Running Docker Containers","text":""},{"location":"month_01/week_04/docker/#viewing-images-containers","title":"\ud83d\udd0d Viewing Images &amp; Containers","text":"<pre><code>docker images    # List available images\ndocker ps        # List running containers\ndocker ps -a     # List all containers (including stopped ones)\n</code></pre>"},{"location":"month_01/week_04/docker/#running-a-container","title":"\ud83d\ude80 Running a Container","text":"<p><pre><code>docker run --name my-container -dit ubuntu\n</code></pre> - <code>-d</code> \u2013 Runs in detached mode (background). - <code>-i</code> \u2013 Interactive mode. - <code>-t</code> \u2013 Allocates a terminal.</p>"},{"location":"month_01/week_04/docker/#stopping-and-restarting-containers","title":"\ud83d\uded1 Stopping and Restarting Containers","text":"<pre><code>docker stop &lt;container_id&gt;\ndocker start &lt;container_id&gt;\n</code></pre>"},{"location":"month_01/week_04/docker/#copying-files-into-a-container","title":"\ud83d\udd04 Copying Files into a Container","text":"<pre><code>docker cp my_file.txt &lt;container_id&gt;:/app/\n</code></pre>"},{"location":"month_01/week_04/docker/#executing-commands-inside-a-running-container","title":"\ud83d\udee0\ufe0f Executing Commands Inside a Running Container","text":"<pre><code>docker exec -it &lt;container_id&gt; bash\n</code></pre>"},{"location":"month_01/week_04/docker/#building-an-image-from-a-dockerfile","title":"\ud83c\udfd7\ufe0f Building an Image from a Dockerfile","text":"<pre><code>docker build -t my-image .\n</code></pre>"},{"location":"month_01/week_04/docker/#case-studies-docker-in-ubuntu","title":"\ud83c\udfdb\ufe0f Case Studies: Docker in Ubuntu","text":""},{"location":"month_01/week_04/docker/#setting-up-docker-on-ubuntu","title":"\ud83c\udfd7\ufe0f Setting Up Docker on Ubuntu","text":"<pre><code>sudo apt update\nsudo apt install apt-transport-https ca-certificates curl software-properties-common\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt update\nsudo apt install docker-ce\n</code></pre>"},{"location":"month_01/week_04/docker/#downloading-images","title":"\ud83c\udfd7\ufe0f Downloading Images","text":"<pre><code>docker pull ubuntu\ndocker pull openjdk:8-jdk\n</code></pre>"},{"location":"month_01/week_04/docker/#creating-a-container","title":"\ud83c\udfd7\ufe0f Creating a Container","text":"<p><pre><code>docker run --name webserver -dit -p 8080:80 httpd\n</code></pre> - Exposes port 80 inside the container and maps it to 8080 on the host.</p>"},{"location":"month_01/week_04/docker/#verifying-the-application","title":"\ud83c\udfd7\ufe0f Verifying the Application","text":"<pre><code>curl http://localhost:8080\n</code></pre>"},{"location":"month_01/week_04/docker/#removing-containers-and-images","title":"\ud83d\uddd1\ufe0f Removing Containers and Images","text":"<pre><code>docker rm &lt;container_id&gt;\ndocker rmi &lt;image_id&gt;\n</code></pre> <p>\ud83d\udd17 More Docker Resources</p>"},{"location":"month_01/week_04/docker/#writing-a-dockerfile-example","title":"\ud83d\udcdc Writing a Dockerfile (Example)","text":""},{"location":"month_01/week_04/docker/#cloning-a-project-from-github","title":"Cloning a Project from GitHub","text":"<pre><code>git clone https://github.com/mentorchita/my_yourname_site.git\ncd my_yourname_site\ntouch Dockerfile\n</code></pre>"},{"location":"month_01/week_04/docker/#basic-dockerfile-example","title":"Basic Dockerfile Example","text":"<pre><code># Use an official Apache image\nFROM httpd:2.4\n# Copy website files into the container\nCOPY ./my_yourname_site /usr/local/apache2/htdocs/\n</code></pre>"},{"location":"month_01/week_04/docker/#building-and-running-the-image","title":"Building and Running the Image","text":"<pre><code>docker build -t my-apache2 .\ndocker run -dit --name my-running-app -p 8080:80 my-apache2\n</code></pre>"},{"location":"month_01/week_04/docker/#conclusion","title":"\ud83c\udfaf Conclusion","text":"<ul> <li>Docker simplifies application deployment by packaging everything into containers.</li> <li>Lightweight and efficient, compared to virtual machines.</li> <li>Easily portable across different environments.</li> <li>Great for CI/CD workflows and scalable microservices.</li> </ul> <p>\ud83d\udd17 Official Docker Documentation</p>"},{"location":"month_02/","title":"DEVOPS PROJECT LAB CHILE","text":"<p>Step into the IT world under the mentors\u2019 guidance! Become job-ready and boost your skills with the practical experience of working on a project with real challenges</p> <p>Why should you choose DevOps? It\u2019s where your decisions matter: you\u2019ll deliver tangible business outcomes within your role and create a real business impact. You\u2019ll have a helicopter view over the operations and development, which will provide you with endless opportunities to learn and refine your skills.</p> <p>Develop your skills, broaden your mind and become a part of our team \u2013 we offer the Apprenticeship to the best alumni!</p> <p>PROJECT LAB ADVANTAGES</p> <ol> <li>3 months of practice to list on your CV  (February 10, 2025 to May 9, 2025)</li> <li>A real project with real challenges  </li> <li>Develop job-ready skills, both technical and soft skills  </li> <li>Mentors\u2019 advice and Tech Leads\u2019 guidance  </li> <li>Improve your English level with classes  </li> <li>Opportunity to enroll in the Apprenticeship program and become a Junior Developer  </li> </ol> <p>PROJECT LAB INFORMATION</p> Sphere Description Processes - Software development processes: Scrum, Jira, Kanban Programming &amp; OOP - Python, Code Conventions, Python Basics and OOP, VSCode usage   - Introduction to architecture and design patterns: MVC, Flask overview   - Testing types, Unit/Integration testing, Test design techniques   - Unit testing in Python, developing a testing environment, Documentation Database Management - Installing and configuring databases, User management (privileges, permissions, roles)   - Backups, Types, Recovery and disaster recovery, Basic monitoring   - Tables, relationships, keys, constraints understanding   - DDL, DML, DCL understanding   - Access to databases with Python using ORM Continuous Integration - Principles of continuous integration, Automated build concept   - CI using Jenkins   - Integration with Jira for ticket creation   - Implement basic monitoring for application resources Continuous Delivery - Continuous delivery intro, CD with CI Tools and plugins, CD Tools (GoCD) Branching Strategies - Source control, Git basics (GitHub, GitLab)   - Branches and tags management strategy Virtualization - Types of virtualization (hardware emulation, full virtualization, paravirtualization, OS-level virtualization)   - Containers (LXC, Docker) Automation - Shell Scripting   - Python for administration Monitoring - Distributed monitoring   - Logging (integrations, IaC Configs and alarms) Cloud Computing - Understanding services and applications by type   - Cloud service models   - Cloud computing platforms (AWS, Azure, Google Cloud, OpenStack, etc.)   - Orchestration (Terraform, AWS CloudFormation, Azure Resource Manager, etc.)"},{"location":"month_03/","title":"DEVOPS PROJECT LAB CHILE","text":"<p>Step into the IT world under the mentors\u2019 guidance! Become job-ready and boost your skills with the practical experience of working on a project with real challenges</p> <p>Why should you choose DevOps? It\u2019s where your decisions matter: you\u2019ll deliver tangible business outcomes within your role and create a real business impact. You\u2019ll have a helicopter view over the operations and development, which will provide you with endless opportunities to learn and refine your skills.</p> <p>Develop your skills, broaden your mind and become a part of our team \u2013 we offer the Apprenticeship to the best alumni!</p> <p>PROJECT LAB ADVANTAGES</p> <ol> <li>3 months of practice to list on your CV  (February 10, 2025 to May 9, 2025)</li> <li>A real project with real challenges  </li> <li>Develop job-ready skills, both technical and soft skills  </li> <li>Mentors\u2019 advice and Tech Leads\u2019 guidance  </li> <li>Improve your English level with classes  </li> <li>Opportunity to enroll in the Apprenticeship program and become a Junior Developer  </li> </ol> <p>PROJECT LAB INFORMATION</p> Sphere Description Processes - Software development processes: Scrum, Jira, Kanban Programming &amp; OOP - Python, Code Conventions, Python Basics and OOP, VSCode usage   - Introduction to architecture and design patterns: MVC, Flask overview   - Testing types, Unit/Integration testing, Test design techniques   - Unit testing in Python, developing a testing environment, Documentation Database Management - Installing and configuring databases, User management (privileges, permissions, roles)   - Backups, Types, Recovery and disaster recovery, Basic monitoring   - Tables, relationships, keys, constraints understanding   - DDL, DML, DCL understanding   - Access to databases with Python using ORM Continuous Integration - Principles of continuous integration, Automated build concept   - CI using Jenkins   - Integration with Jira for ticket creation   - Implement basic monitoring for application resources Continuous Delivery - Continuous delivery intro, CD with CI Tools and plugins, CD Tools (GoCD) Branching Strategies - Source control, Git basics (GitHub, GitLab)   - Branches and tags management strategy Virtualization - Types of virtualization (hardware emulation, full virtualization, paravirtualization, OS-level virtualization)   - Containers (LXC, Docker) Automation - Shell Scripting   - Python for administration Monitoring - Distributed monitoring   - Logging (integrations, IaC Configs and alarms) Cloud Computing - Understanding services and applications by type   - Cloud service models   - Cloud computing platforms (AWS, Azure, Google Cloud, OpenStack, etc.)   - Orchestration (Terraform, AWS CloudFormation, Azure Resource Manager, etc.)"}]}
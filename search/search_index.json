{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Devops Project Lab Chile !","text":""},{"location":"#table-of-contents","title":"Table of Contents","text":"<p>Month 01</p><p>week 1 - week 4</p> <p>Month 02</p><p>week 5 - week 8</p> <p>Month 03</p><p>week 9 - week 12</p>"},{"location":"__init__/","title":"init","text":""},{"location":"month_01/","title":"DEVOPS PROJECT LAB CHILE","text":"<p>Step into the IT world under the mentors\u2019 guidance! Become job-ready and boost your skills with the practical experience of working on a project with real challenges</p> <p>Why should you choose DevOps? It\u2019s where your decisions matter: you\u2019ll deliver tangible business outcomes within your role and create a real business impact. You\u2019ll have a helicopter view over the operations and development, which will provide you with endless opportunities to learn and refine your skills.</p> <p>Develop your skills, broaden your mind and become a part of our team \u2013 we offer the Apprenticeship to the best alumni!</p> <p>PROJECT LAB ADVANTAGES</p> <ol> <li>3 months of practice to list on your CV  (February 10, 2025 to May 9, 2025)</li> <li>A real project with real challenges  </li> <li>Develop job-ready skills, both technical and soft skills  </li> <li>Mentors\u2019 advice and Tech Leads\u2019 guidance  </li> <li>Improve your English level with classes  </li> <li>Opportunity to enroll in the Apprenticeship program and become a Junior Developer  </li> </ol> <p>PROJECT LAB INFORMATION</p> Sphere Description Processes - Software development processes: Scrum, Jira, Kanban Programming &amp; OOP - Python, Code Conventions, Python Basics and OOP, VSCode usage   - Introduction to architecture and design patterns: MVC, Flask overview   - Testing types, Unit/Integration testing, Test design techniques   - Unit testing in Python, developing a testing environment, Documentation Database Management - Installing and configuring databases, User management (privileges, permissions, roles)   - Backups, Types, Recovery and disaster recovery, Basic monitoring   - Tables, relationships, keys, constraints understanding   - DDL, DML, DCL understanding   - Access to databases with Python using ORM Continuous Integration - Principles of continuous integration, Automated build concept   - CI using Jenkins   - Integration with Jira for ticket creation   - Implement basic monitoring for application resources Continuous Delivery - Continuous delivery intro, CD with CI Tools and plugins, CD Tools (GoCD) Branching Strategies - Source control, Git basics (GitHub, GitLab)   - Branches and tags management strategy Virtualization - Types of virtualization (hardware emulation, full virtualization, paravirtualization, OS-level virtualization)   - Containers (LXC, Docker) Automation - Shell Scripting   - Python for administration Monitoring - Distributed monitoring   - Logging (integrations, IaC Configs and alarms) Cloud Computing - Understanding services and applications by type   - Cloud service models   - Cloud computing platforms (AWS, Azure, Google Cloud, OpenStack, etc.)   - Orchestration (Terraform, AWS CloudFormation, Azure Resource Manager, etc.)"},{"location":"month_01/week_01/","title":"1\ufe0f\u20e3 Week 1","text":"Topic Description Basic Concepts Introduction to fundamental concepts. Git and GitHub Overview of Git version control and GitHub. Jira Introduction to Jira for project management."},{"location":"month_01/week_01/concepts/","title":"Basic Concepts","text":""},{"location":"month_01/week_01/concepts/#software-development-concepts","title":"Software Development Concepts","text":"<ol> <li> <p>Framework    A framework is a pre-built structure or foundation that provides reusable code and tools to facilitate software development. It defines a standard way to build and deploy applications, including libraries, APIs, and best practices. Examples include Django (Python), React (JavaScript), and Spring (Java).</p> </li> <li> <p>Software Development Life Cycle (SDLC)    SDLC is a structured process that guides the development of software from planning to deployment and maintenance. It typically includes stages such as planning, analysis, design, implementation, testing, deployment, and maintenance.</p> </li> <li> <p>eXtreme Programming (XP)    XP is an agile software development methodology that emphasizes frequent releases, continuous feedback, and collaboration between developers and customers. It promotes practices like test-driven development (TDD), pair programming, and continuous integration.</p> </li> <li> <p>SCRUM    SCRUM is an agile project management framework used for developing software in iterative cycles called sprints (usually 1-4 weeks). It involves roles like the Product Owner, Scrum Master, and Development Team, and uses ceremonies such as daily stand-ups, sprint planning, and retrospectives.</p> </li> <li> <p>Kanban    Kanban is a lean project management methodology that focuses on visualizing work, limiting work in progress (WIP), and improving workflow efficiency. It uses a board with columns (e.g., To Do, In Progress, Done) to track tasks.</p> </li> <li> <p>Native / Hybrid Mobile Applications </p> </li> <li> <p>Native applications: Apps built specifically for a particular mobile platform (iOS or Android) using platform-specific languages (Swift for iOS, Kotlin/Java for Android). They offer high performance and access to native device features.  </p> </li> <li> <p>Hybrid applications: Apps that combine web technologies (HTML, CSS, JavaScript) with a native wrapper to run on multiple platforms. They use frameworks like Ionic or React Native and are easier to maintain than native apps.</p> </li> </ol>"},{"location":"month_01/week_01/concepts/#general-software-concepts","title":"General Software Concepts","text":"<ol> <li> <p>Software    Software is a collection of programs, instructions, and data that enable a computer to perform specific tasks. It is divided into system software (like operating systems) and application software (like Microsoft Word or Google Chrome).</p> </li> <li> <p>Operating System (OS)    An OS is system software that manages computer hardware and software resources while providing a user interface. Examples include Windows, macOS, Linux, Android, and iOS.</p> </li> <li> <p>Application    An application (app) is software designed to perform specific tasks for users, such as word processing, web browsing, or email. Applications can be desktop-based, web-based, or mobile-based.</p> </li> <li> <p>CRUD (Create, Read, Update, Delete)     CRUD represents the four basic operations performed on data in a database or system:</p> <ul> <li>Create: Add new records or data.</li> <li>Read: Retrieve existing data.</li> <li>Update: Modify existing data.</li> <li>Delete: Remove existing data.</li> </ul> </li> </ol>"},{"location":"month_01/week_01/concepts/#cloud-computing-models","title":"Cloud Computing Models","text":"<ol> <li> <p>Software as a Service (SaaS)     A cloud computing model where users access software applications over the internet without installing them on their devices. Examples: Gmail, Dropbox, Microsoft 365.</p> </li> <li> <p>Platform as a Service (PaaS)     A cloud computing model that provides a platform for developers to build, test, and deploy applications without managing infrastructure. Examples: Google App Engine, AWS Elastic Beanstalk.</p> </li> <li> <p>Infrastructure as a Service (IaaS)     A cloud computing model that provides virtualized computing resources over the internet, such as servers, storage, and networking. Users have more control over the infrastructure. Examples: AWS EC2, Microsoft Azure Virtual Machines.</p> </li> </ol>"},{"location":"month_01/week_01/git/","title":"Git Introduction","text":""},{"location":"month_01/week_01/git/#what-is-version-control","title":"What is Version Control?","text":"<ul> <li>Version Control (VC), also known as Source Control (SCM), manages changes to documents, code, and other data.</li> <li>Common tasks include tracking changes, updates, resolving conflicts, and branching.</li> </ul>"},{"location":"month_01/week_01/git/#types-of-version-control-systems","title":"Types of Version Control Systems","text":"<ul> <li>Centralized: CVS, Perforce, SVN, TFS.</li> <li>Distributed: Git, Mercurial.</li> </ul>"},{"location":"month_01/week_01/git/#introduction-to-git","title":"Introduction to Git","text":"<ul> <li>A distributed version control system focusing on speed, integrity, and non-linear workflows.</li> <li>Created by Linus Torvalds in 2005 for Linux kernel development.</li> </ul>"},{"location":"month_01/week_01/git/#installing-git","title":"Installing Git","text":"<ul> <li>Linux: <code>apt-get install git</code> (Debian) / <code>yum install git</code> (Red Hat).</li> <li>Windows: Download from git-scm.com.</li> <li>Mac: Install via Homebrew.</li> </ul>"},{"location":"month_01/week_01/git/#git-configuration","title":"Git Configuration","text":"<ul> <li>Set user identity:   <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"your@email.com\"\n</code></pre></li> <li>Set default editor and view settings with <code>git config --list</code>.</li> </ul>"},{"location":"month_01/week_01/git/#basic-git-concepts","title":"Basic Git Concepts","text":"<ul> <li>Repository (.git): Stores all project history.</li> <li>Working Directory: Current state of project files.</li> <li>Commit: Snapshot of changes.</li> <li>Staging Area: Prepares changes before committing.</li> </ul>"},{"location":"month_01/week_01/git/#creating-cloning-repositories","title":"Creating &amp; Cloning Repositories","text":"<ul> <li>Create new repository: <pre><code>git init\n</code></pre></li> <li>Clone an existing repository: <pre><code>git clone &lt;URL&gt;\n</code></pre></li> </ul>"},{"location":"month_01/week_01/git/#ignoring-files","title":"Ignoring Files","text":"<ul> <li><code>.gitignore</code> prevents tracking unnecessary files like system files, build artifacts, and credentials.</li> </ul>"},{"location":"month_01/week_01/git/#key-git-commands","title":"Key Git Commands","text":"<ul> <li>Adding &amp; Committing:   <pre><code>git add &lt;file&gt;\ngit commit -m \"Commit message\"\n</code></pre></li> <li>Pushing &amp; Pulling:   <pre><code>git push\ngit fetch\ngit pull\n</code></pre></li> <li>Branching:   <pre><code>git branch &lt;name&gt;  # Create branch\ngit checkout &lt;name&gt;  # Switch branch\ngit branch -d &lt;name&gt;  # Delete branch\n</code></pre></li> </ul>"},{"location":"month_01/week_01/git/#git-workflow","title":"Git Workflow","text":"<ol> <li>Clone repository (<code>git clone</code>).</li> <li>Create/Switch branch (<code>git branch</code>, <code>git checkout</code>).</li> <li>Modify &amp; stage changes (<code>git add</code>).</li> <li>Review changes (<code>git status</code>, <code>git log</code>).</li> <li>Commit changes (<code>git commit</code>).</li> <li>Push changes (<code>git push</code>).</li> <li>Sync with remote (<code>git fetch</code>, <code>git pull</code>).</li> </ol>"},{"location":"month_01/week_01/git/#useful-resources","title":"Useful Resources","text":"<ul> <li>Git Book \ud83d\udcd6 \u2013 Official, in-depth guide covering everything from basics to advanced workflows. Best for structured learning.  </li> <li>Atlassian Git Tutorials \ud83c\udf93 \u2013 Practical, beginner-friendly step-by-step guides with real-world examples.  </li> <li>Try Git \u26a1 \u2013 Interactive, browser-based tutorial for quickly learning Git basics.  </li> <li>Learn Git Branching \ud83c\udf3f \u2013 Visual, hands-on exercises to master Git branching concepts.  </li> </ul>"},{"location":"month_01/week_01/jira/","title":"Tools: Jira and Confluence","text":""},{"location":"month_01/week_01/jira/#agenda","title":"Agenda","text":"<p>The document covers the tools Jira and Confluence, including their key functionalities:</p> <ol> <li>Jira as a Project Management Tool </li> <li>Overview  </li> <li>Issues, filtering, and dashboards  </li> <li> <p>GreenHopper extension  </p> </li> <li> <p>Confluence as a Team Collaboration Tool </p> </li> <li>Overview  </li> <li>Page management  </li> <li>Meeting notes  </li> <li>Macros, import/export  </li> <li>Additional features  </li> </ol>"},{"location":"month_01/week_01/jira/#jira-overview","title":"Jira Overview","text":"<p>Jira is a flexible project management tool that allows customization of workflows, integration with existing systems, and the addition of plugins. It is commonly used for:  </p> <ul> <li>Bug tracking for a single application  </li> <li>Managing software development across multiple products  </li> <li>Running multiple projects within a company  </li> </ul>"},{"location":"month_01/week_01/jira/#jira-terminology","title":"Jira Terminology","text":"<ul> <li>Project: A collection of issues, each identified by a name and key.  </li> <li>Issue: Represents different entities depending on the organization, such as a software bug, project task, helpdesk ticket, or product improvement.  </li> </ul>"},{"location":"month_01/week_01/jira/#jira-components-and-versions","title":"Jira Components and Versions","text":"<ul> <li>Components: Subsections of a project used to group issues into smaller parts.  </li> <li>Versions: Points-in-time in a project, used for release planning (e.g., application builds, sprints). Versions can have different statuses: Released, Unreleased, Archived, or Overdue.  </li> </ul>"},{"location":"month_01/week_01/jira/#jira-issues-and-types","title":"Jira Issues and Types","text":"<p>Jira issues represent logical pieces of a project's scope. There are two types of issues: parent and child (sub-issues). Each issue follows a workflow with different states and transitions.  </p> <ul> <li>Epic &amp; Story: Describe project scope within requirements management.  </li> <li>Task &amp; Technical Task: Represent generic project work, with technical tasks often related to specific functionalities.  </li> <li>Bug &amp; Sub-Bug: Describe problems affecting functionality, supporting Agile best practices.  </li> <li>Improvement, New Feature &amp; Risk: Used for documenting changes, feature requests, and risk analysis.  </li> </ul>"},{"location":"month_01/week_01/jira/#jira-workflow","title":"Jira Workflow","text":"<p>Issues move through different statuses (e.g., Open, In Progress, Resolved, Closed) via transitions (e.g., Start Progress, Resolve, Reopen).  </p>"},{"location":"month_01/week_01/jira/#filtering-and-dashboards","title":"Filtering and Dashboards","text":"<ul> <li>Simple Search: Basic issue search.  </li> <li>Advanced Search (JQL - Jira Query Language): SQL-like queries for complex filtering.  </li> <li>Quick Search: Fast issue lookup with minimal typing.  </li> <li>Issue Filters: Saved searches that can be displayed in dashboards and shared with others.  </li> <li>Dashboards: Provide visual information using gadgets, which display charts, reports, and team collaboration tools.  </li> </ul>"},{"location":"month_01/week_01/jira/#confluence-overview","title":"Confluence Overview","text":"<p>Confluence is an enterprise wiki designed to help teams share and collaborate efficiently.  </p> <ul> <li>Key Features:</li> <li>Create, share, and discuss ideas, files, and projects.  </li> <li>Reduce email and meetings for better efficiency.  </li> </ul>"},{"location":"month_01/week_01/jira/#confluence-terminology","title":"Confluence Terminology","text":"<ul> <li>Space: A collection of wiki pages.  </li> <li>Pages: Main content storage for documents, notes, and specifications.  </li> <li>Blog Posts: Used for announcements, status reports, or journal entries.  </li> <li>Comments: Remarks or questions added to pages.  </li> <li>Bookmarks: Links to external content.  </li> </ul>"},{"location":"month_01/week_01/jira/#page-management-in-confluence","title":"Page Management in Confluence","text":"<p>Users can: - Create, edit, move, copy, and delete pages. - Search content, export in PDF/Word/HTML/XML formats. - Organize content using parent-child relationships. - Collaborate via comments and view page history.  </p>"},{"location":"month_01/week_01/jira/#wiki-markup-in-confluence","title":"Wiki Markup in Confluence","text":"<ul> <li>Headings: <code>h1.</code>, <code>h2.</code> for different levels.  </li> <li>Lists: <code>-</code> for bullets, <code>#</code> for numbered lists.  </li> <li>Tables: <code>||heading 1||heading 2||heading 3||</code> for structured data representation.  </li> </ul>"},{"location":"month_01/week_01/jira/#conclusion","title":"Conclusion","text":"<p>The document provides an overview of Jira and Confluence, explaining their role in project management and team collaboration. Jira is primarily used for tracking tasks, bugs, and development, while Confluence is a documentation and collaboration tool that helps teams share information efficiently.</p>"},{"location":"month_01/week_02/","title":"2\ufe0f\u20e3 Week 2","text":"Topic Description Agile, Scrum, and Kanban Introduction to Agile methodologies, focusing on Scrum and Kanban frameworks. Learn how to manage projects efficiently, improve collaboration, and adapt to change. Networking Fundamentals of computer networking, including network architectures, protocols (TCP/IP, HTTP, DNS), IP addressing, and network security. Understand how devices communicate over local and global networks."},{"location":"month_01/week_02/agile/","title":"Agile, Scrum, and Kanban","text":""},{"location":"month_01/week_02/agile/#introduction","title":"Introduction","text":"<p>This document covers key aspects of Agile methodologies, focusing on Scrum and Kanban. It also discusses the Software Development Lifecycle (SDLC) and its application in DevOps.</p>"},{"location":"month_01/week_02/agile/#software-development-lifecycle-sdlc","title":"Software Development Lifecycle (SDLC)","text":"<ul> <li>The Software Development Lifecycle (SDLC) is a process for building software systems in a structured way.</li> <li>It consists of multiple phases:</li> <li>Planning</li> <li>Analysis</li> <li>Design</li> <li>Development</li> <li>Testing</li> <li>Deployment</li> <li>Operations &amp; Maintenance</li> <li>SDLC can be implemented using different methodologies.</li> </ul>"},{"location":"month_01/week_02/agile/#sdlc-in-devops","title":"SDLC in DevOps","text":"<ul> <li>DevOps integrates SDLC with automation and continuous delivery practices.</li> <li>More details: What is DevOps?</li> </ul>"},{"location":"month_01/week_02/agile/#project-management-in-software-development","title":"Project Management in Software Development","text":"<ul> <li>Project management involves leading a team to meet specific project goals under given constraints (time, budget, scope).</li> <li>Various software project management methodologies exist:</li> <li>Waterfall</li> <li>Spiral (RUP and others)</li> <li>V-Model</li> <li>eXtreme Programming (XP)</li> <li>Agile (Scrum, Kanban, etc.)</li> <li>Agile methodologies have gained popularity due to their adaptability and iterative approach.</li> </ul>"},{"location":"month_01/week_02/agile/#agile-methodology","title":"Agile Methodology","text":"<p>Agile is based on the Agile Manifesto, which prioritizes: - Individuals and interactions over processes and tools. - Working software over comprehensive documentation. - Customer collaboration over contract negotiation. - Responding to change over following a plan.</p>"},{"location":"month_01/week_02/agile/#scrum-vs-kanban","title":"Scrum vs. Kanban","text":"<ul> <li>Scrum is a structured framework for iterative software development.</li> <li>Kanban is a lean workflow management method, suitable for continuous delivery and incremental improvements.</li> </ul>"},{"location":"month_01/week_02/agile/#kanban","title":"Kanban","text":""},{"location":"month_01/week_02/agile/#what-is-kanban","title":"What is Kanban?","text":"<ul> <li>A lean methodology that originated from the Toyota Production System (TPS).</li> <li>Designed for continuous workflow improvement in Agile and DevOps teams.</li> </ul>"},{"location":"month_01/week_02/agile/#key-kanban-practices","title":"Key Kanban Practices","text":"<ol> <li>Visualizing workflow (via a Kanban board).</li> <li>Limiting work in progress (WIP).</li> <li>Managing flow efficiently.</li> <li>Making process policies explicit.</li> <li>Implementing feedback loops.</li> <li>Improving collaboratively.</li> </ol>"},{"location":"month_01/week_02/agile/#kanban-board","title":"Kanban Board","text":"<ul> <li>A visual tool that tracks work items from To Do \u2192 In Progress \u2192 Done.</li> </ul>"},{"location":"month_01/week_02/agile/#scrum","title":"Scrum","text":""},{"location":"month_01/week_02/agile/#what-is-scrum","title":"What is Scrum?","text":"<ul> <li>A framework for managing complex product development.</li> <li>Introduced by Hirotaka Takeuchi and Ikujiro Nonaka (1986).</li> <li>Formalized by Ken Schwaber and Jeff Sutherland (1995).</li> <li>Standardized in the Scrum Guide (2009).</li> </ul>"},{"location":"month_01/week_02/agile/#scrum-pillars","title":"Scrum Pillars","text":"<ol> <li>Transparency \u2013 Everyone understands the work process.</li> <li>Inspection \u2013 Regularly assess progress.</li> <li>Adaptation \u2013 Adjust plans based on feedback.</li> </ol>"},{"location":"month_01/week_02/agile/#scrum-values","title":"Scrum Values","text":"<ul> <li>Commitment</li> <li>Focus</li> <li>Openness</li> <li>Respect</li> <li>Courage</li> </ul>"},{"location":"month_01/week_02/agile/#scrum-key-elements","title":"Scrum Key Elements","text":"<ul> <li>Roles</li> <li>Events</li> <li>Artifacts</li> </ul>"},{"location":"month_01/week_02/agile/#scrum-roles","title":"Scrum Roles","text":"<ol> <li>Developers</li> <li>Build the software.</li> <li>Maintain the Sprint Backlog.</li> <li> <p>Ensure adherence to the Definition of Done.</p> </li> <li> <p>Product Owner (PO)</p> </li> <li>Maximizes product value.</li> <li>Manages the Product Backlog.</li> <li> <p>Represents stakeholders.</p> </li> <li> <p>Scrum Master</p> </li> <li>Ensures effective Scrum adoption.</li> <li>Coaches the team on Agile principles.</li> <li>Serves the Product Owner, Developers, and Organization.</li> </ol>"},{"location":"month_01/week_02/agile/#scrum-events","title":"Scrum Events","text":""},{"location":"month_01/week_02/agile/#sprint","title":"Sprint","text":"<ul> <li>A time-boxed iteration (1 month or less) for development.</li> <li>Enables predictability and adaptability.</li> </ul>"},{"location":"month_01/week_02/agile/#sprint-planning","title":"Sprint Planning","text":"<ul> <li>Defines the work for the sprint.</li> <li>Covers:</li> <li>Why is this Sprint valuable?</li> <li>What can be done this Sprint?</li> <li>How will the work be accomplished?</li> <li>Common estimation techniques:</li> <li>Planning Poker</li> <li>T-Shirt Sizes</li> <li>Bucket System</li> </ul>"},{"location":"month_01/week_02/agile/#daily-scrum-daily-stand-up","title":"Daily Scrum (Daily Stand-up)","text":"<ul> <li>15-minute daily meeting.</li> <li>Focuses on:</li> <li>What was completed yesterday?</li> <li>What will be done today?</li> <li>Are there any blockers?</li> </ul>"},{"location":"month_01/week_02/agile/#sprint-review","title":"Sprint Review","text":"<ul> <li>Second to last event of the sprint.</li> <li>Demonstrates progress to stakeholders.</li> <li>Determines next steps.</li> </ul>"},{"location":"month_01/week_02/agile/#sprint-retrospective","title":"Sprint Retrospective","text":"<ul> <li>Final event of the sprint.</li> <li>Focuses on team improvement and workflow enhancements.</li> </ul>"},{"location":"month_01/week_02/agile/#event-time-boxes","title":"Event Time-Boxes","text":"Event 30 days 3 weeks 2 weeks 1 week Sprint Planning 8 hrs &lt;8 hrs &lt;8 hrs &lt;4 hrs Daily Scrum 15 min 15 min 15 min 15 min Sprint Review 4 hrs &lt;4 hrs &lt;4 hrs &lt;2 hrs Sprint Retrospective 3 hrs &lt;3 hrs &lt;3 hrs &lt;1.5 hrs"},{"location":"month_01/week_02/agile/#scrum-artifacts","title":"Scrum Artifacts","text":""},{"location":"month_01/week_02/agile/#product-backlog","title":"Product Backlog","text":"<ul> <li>An ordered list of all necessary features and tasks.</li> <li>Maintained by the Product Owner.</li> </ul>"},{"location":"month_01/week_02/agile/#sprint-backlog","title":"Sprint Backlog","text":"<ul> <li>Contains:</li> <li>Sprint Goal (why).</li> <li>Selected Product Backlog Items (what).</li> <li>Actionable plan (how).</li> <li>Maintained by Developers.</li> </ul>"},{"location":"month_01/week_02/agile/#product-backlog-items-pbis","title":"Product Backlog Items (PBIs)","text":"<ul> <li>Includes:</li> <li>User Stories</li> <li>Feature Definitions</li> <li>Non-functional Requirements</li> <li>Constraints &amp; Bugs</li> </ul>"},{"location":"month_01/week_02/agile/#user-stories","title":"User Stories","text":"<ul> <li>Short descriptions of user needs:   <pre><code>As a [role], I want [goal], so that [benefit].\n</code></pre></li> </ul>"},{"location":"month_01/week_02/agile/#increment","title":"Increment","text":"<ul> <li>A working piece of the product that delivers value.</li> <li>Must be usable and meet the Definition of Done.</li> </ul>"},{"location":"month_01/week_02/agile/#definition-of-done-dod","title":"Definition of Done (DoD)","text":"<ul> <li>Establishes quality standards.</li> <li>Ensures that completed work is shippable.</li> </ul>"},{"location":"month_01/week_02/agile/#scrum-with-remote-teams","title":"Scrum with Remote Teams","text":"<ul> <li>Remote work presents challenges such as:</li> <li>Communication gaps.</li> <li>Different time zones.</li> <li>Feeling of isolation.</li> <li>Knowledge fragmentation.</li> </ul>"},{"location":"month_01/week_02/agile/#best-practices","title":"Best Practices","text":"<ul> <li>Clear communication plan.</li> <li>Effective collaboration tools (e.g., Slack, Jira).</li> <li>Daily stand-ups to keep teams aligned.</li> <li>Well-defined Product Backlog.</li> <li>Encourage self-organization.</li> </ul>"},{"location":"month_01/week_02/agile/#useful-resources","title":"Useful Resources","text":"<ul> <li>Agile Manifesto</li> <li>Scrum Guide</li> <li>Scrum.org</li> <li>Scrum in Atlassian</li> <li>Kanban in Atlassian</li> </ul>"},{"location":"month_01/week_02/networking/","title":"Networking Basics","text":""},{"location":"month_01/week_02/networking/#introduction","title":"Introduction","text":""},{"location":"month_01/week_02/networking/#why-learn-computer-networking","title":"Why Learn Computer Networking?","text":"<p>Modern software applications are distributed systems, meaning they run across multiple networked devices. Every IT specialist needs a solid understanding of networking to work efficiently.</p>"},{"location":"month_01/week_02/networking/#understanding-networks","title":"Understanding Networks","text":""},{"location":"month_01/week_02/networking/#what-is-a-computer-network","title":"What is a Computer Network?","text":"<p>A computer network is a system of connected devices (computers, servers, routers, switches) that exchange data and resources.</p>"},{"location":"month_01/week_02/networking/#types-of-networks","title":"Types of Networks","text":"<ul> <li>Local Area Network (LAN) \u2013 Covers a small geographical area (e.g., home, office).</li> <li>Wide Area Network (WAN) \u2013 Covers large distances (e.g., the Internet).</li> <li>Wireless Networks (WLAN) \u2013 Uses radio waves instead of cables.</li> <li>Metropolitan Area Network (MAN) \u2013 Covers a city or large campus.</li> <li>Personal Area Network (PAN) \u2013 Connects devices close to an individual (e.g., Bluetooth).</li> </ul>"},{"location":"month_01/week_02/networking/#network-topologies","title":"Network Topologies","text":"<ul> <li>Star Topology \u2013 Devices connected to a central hub.</li> <li>Bus Topology \u2013 Single communication line; failure affects the whole network.</li> <li>Ring Topology \u2013 Devices connected in a closed loop.</li> <li>Mesh Topology \u2013 Devices are interconnected, providing redundancy.</li> </ul>"},{"location":"month_01/week_02/networking/#client-server-model","title":"Client-Server Model","text":"<p>A fundamental concept in networking where: - Client: Requests services (e.g., web browser, email app). - Server: Provides services (e.g., web server, database server).</p>"},{"location":"month_01/week_02/networking/#characteristics-of-a-client","title":"Characteristics of a Client","text":"<p>\u2714 Initiates network requests \u2714 Receives and processes responses \u2714 Connects to multiple servers simultaneously \u2714 Has a graphical user interface (GUI) for user interaction  </p>"},{"location":"month_01/week_02/networking/#characteristics-of-a-server","title":"Characteristics of a Server","text":"<p>\u2714 Waits for client requests \u2714 Processes and responds to client queries \u2714 Can manage resources, install/uninstall applications remotely  </p>"},{"location":"month_01/week_02/networking/#networking-protocols","title":"Networking Protocols","text":""},{"location":"month_01/week_02/networking/#what-is-a-protocol","title":"What is a Protocol?","text":"<p>A protocol is a set of rules that defines how data is transmitted and received over a network.</p>"},{"location":"month_01/week_02/networking/#common-protocols","title":"Common Protocols","text":"Protocol Purpose HTTP(S) Web browsing FTP File transfers DNS Converts domain names to IP addresses DHCP Assigns dynamic IP addresses SSL/TLS Encryption for secure communication SMTP, POP3, IMAP Email protocols"},{"location":"month_01/week_02/networking/#osi-vs-tcpip-models","title":"OSI vs. TCP/IP Models","text":"<p>Two conceptual models describe how data flows across networks.</p>"},{"location":"month_01/week_02/networking/#osi-model-7-layers","title":"OSI Model (7 Layers)","text":"<ol> <li>Application \u2013 User applications (HTTP, FTP, SMTP).</li> <li>Presentation \u2013 Data formatting, encryption (SSL/TLS).</li> <li>Session \u2013 Manages connections (e.g., logins, sessions).</li> <li>Transport \u2013 Reliable data transmission (TCP, UDP).</li> <li>Network \u2013 Routes data using IP addresses.</li> <li>Data Link \u2013 MAC addressing, switching (Ethernet, Wi-Fi).</li> <li>Physical \u2013 Hardware connections (cables, wireless signals).</li> </ol>"},{"location":"month_01/week_02/networking/#tcpip-model-4-layers","title":"TCP/IP Model (4 Layers)","text":"OSI Layer TCP/IP Equivalent Application Application Presentation \u274c (Included in Application) Session \u274c (Included in Application) Transport Transport (TCP, UDP) Network Internet (IP, ICMP, ARP) Data Link Network Access (Ethernet, Wi-Fi) Physical \u274c (Part of Network Access)"},{"location":"month_01/week_02/networking/#ip-addressing","title":"IP Addressing","text":""},{"location":"month_01/week_02/networking/#what-is-an-ip-address","title":"What is an IP Address?","text":"<p>An IP address is a unique identifier assigned to devices on a network.</p>"},{"location":"month_01/week_02/networking/#ipv4-vs-ipv6","title":"IPv4 vs. IPv6","text":"Feature IPv4 IPv6 Deployment 1981 1998 Address Size 32-bit 128-bit Example <code>192.168.1.1</code> <code>2001:db8::ff00:42:8329</code> Number of Addresses ~4.3 billion 340 undecillion (10\u00b3\u2076)"},{"location":"month_01/week_02/networking/#special-ip-addresses","title":"Special IP Addresses","text":"<ul> <li>0.0.0.0 \u2013 Default network.</li> <li>127.0.0.1 \u2013 Loopback (localhost).</li> <li>192.168.x.x, 10.x.x.x \u2013 Private networks.</li> <li>255.255.255.255 \u2013 Broadcast.</li> </ul>"},{"location":"month_01/week_02/networking/#mac-address-vs-ip-address","title":"MAC Address vs. IP Address","text":"Feature MAC Address IP Address Purpose Identifies device hardware Identifies device location on the network Format <code>1A:2B:3C:4D:5E:6F</code> <code>192.168.1.1</code> Used in Data Link Layer Network Layer"},{"location":"month_01/week_02/networking/#ports-communication","title":"Ports &amp; Communication","text":""},{"location":"month_01/week_02/networking/#what-is-a-port","title":"What is a Port?","text":"<p>A port is a logical endpoint for communication between devices.</p>"},{"location":"month_01/week_02/networking/#port-number-ranges","title":"Port Number Ranges","text":"Range Description 0 \u2013 1023 Well-Known Ports (HTTP, FTP, SSH) 1024 \u2013 49151 Registered Ports 49152 \u2013 65535 Dynamic/Private Ports"},{"location":"month_01/week_02/networking/#common-ports","title":"Common Ports","text":"Port Protocol 20/21 FTP (File Transfer) 22 SSH (Secure Shell) 25 SMTP (Email) 53 DNS (Domain Name System) 80 HTTP (Web Browsing) 443 HTTPS (Secure Web Browsing)"},{"location":"month_01/week_02/networking/#network-media","title":"Network Media","text":""},{"location":"month_01/week_02/networking/#types-of-transmission-media","title":"Types of Transmission Media","text":"<ol> <li>Wired Connections</li> <li>Twisted Pair (Ethernet) \u2013 Common in LANs.</li> <li>Fiber Optic \u2013 High-speed, long-distance communication.</li> <li>Wireless Connections</li> <li>Wi-Fi \u2013 Wireless LAN.</li> <li>Infrared \u2013 Short-range data transfer.</li> <li>Satellite \u2013 Long-range communication.</li> </ol>"},{"location":"month_01/week_02/networking/#networking-devices","title":"Networking Devices","text":"Device Function Router Directs traffic between networks (e.g., home network to the internet). Switch Connects multiple devices within the same network. Modem Converts digital data to analog for internet access. Firewall Protects networks by filtering traffic. Server Stores and provides data to clients."},{"location":"month_01/week_02/networking/#vlan-virtual-local-area-networks","title":"VLAN (Virtual Local Area Networks)","text":"<ul> <li>VLANs create isolated network segments within a larger network.</li> <li>Use IEEE 802.1Q standard.</li> <li>Improves network efficiency and security.</li> </ul>"},{"location":"month_01/week_02/networking/#summary","title":"Summary","text":"<ul> <li>Networking is essential for modern IT professionals.</li> <li>Protocols define rules for communication.</li> <li>TCP/IP is the foundation of the Internet.</li> <li>IP addresses &amp; MAC addresses help identify devices.</li> <li>Ports &amp; protocols enable communication between applications.</li> <li>Network devices like routers, switches, and servers manage data traffic.</li> </ul>"},{"location":"month_02/","title":"DEVOPS PROJECT LAB CHILE","text":"<p>Step into the IT world under the mentors\u2019 guidance! Become job-ready and boost your skills with the practical experience of working on a project with real challenges</p> <p>Why should you choose DevOps? It\u2019s where your decisions matter: you\u2019ll deliver tangible business outcomes within your role and create a real business impact. You\u2019ll have a helicopter view over the operations and development, which will provide you with endless opportunities to learn and refine your skills.</p> <p>Develop your skills, broaden your mind and become a part of our team \u2013 we offer the Apprenticeship to the best alumni!</p> <p>PROJECT LAB ADVANTAGES</p> <ol> <li>3 months of practice to list on your CV  (February 10, 2025 to May 9, 2025)</li> <li>A real project with real challenges  </li> <li>Develop job-ready skills, both technical and soft skills  </li> <li>Mentors\u2019 advice and Tech Leads\u2019 guidance  </li> <li>Improve your English level with classes  </li> <li>Opportunity to enroll in the Apprenticeship program and become a Junior Developer  </li> </ol> <p>PROJECT LAB INFORMATION</p> Sphere Description Processes - Software development processes: Scrum, Jira, Kanban Programming &amp; OOP - Python, Code Conventions, Python Basics and OOP, VSCode usage   - Introduction to architecture and design patterns: MVC, Flask overview   - Testing types, Unit/Integration testing, Test design techniques   - Unit testing in Python, developing a testing environment, Documentation Database Management - Installing and configuring databases, User management (privileges, permissions, roles)   - Backups, Types, Recovery and disaster recovery, Basic monitoring   - Tables, relationships, keys, constraints understanding   - DDL, DML, DCL understanding   - Access to databases with Python using ORM Continuous Integration - Principles of continuous integration, Automated build concept   - CI using Jenkins   - Integration with Jira for ticket creation   - Implement basic monitoring for application resources Continuous Delivery - Continuous delivery intro, CD with CI Tools and plugins, CD Tools (GoCD) Branching Strategies - Source control, Git basics (GitHub, GitLab)   - Branches and tags management strategy Virtualization - Types of virtualization (hardware emulation, full virtualization, paravirtualization, OS-level virtualization)   - Containers (LXC, Docker) Automation - Shell Scripting   - Python for administration Monitoring - Distributed monitoring   - Logging (integrations, IaC Configs and alarms) Cloud Computing - Understanding services and applications by type   - Cloud service models   - Cloud computing platforms (AWS, Azure, Google Cloud, OpenStack, etc.)   - Orchestration (Terraform, AWS CloudFormation, Azure Resource Manager, etc.)"},{"location":"month_03/","title":"DEVOPS PROJECT LAB CHILE","text":"<p>Step into the IT world under the mentors\u2019 guidance! Become job-ready and boost your skills with the practical experience of working on a project with real challenges</p> <p>Why should you choose DevOps? It\u2019s where your decisions matter: you\u2019ll deliver tangible business outcomes within your role and create a real business impact. You\u2019ll have a helicopter view over the operations and development, which will provide you with endless opportunities to learn and refine your skills.</p> <p>Develop your skills, broaden your mind and become a part of our team \u2013 we offer the Apprenticeship to the best alumni!</p> <p>PROJECT LAB ADVANTAGES</p> <ol> <li>3 months of practice to list on your CV  (February 10, 2025 to May 9, 2025)</li> <li>A real project with real challenges  </li> <li>Develop job-ready skills, both technical and soft skills  </li> <li>Mentors\u2019 advice and Tech Leads\u2019 guidance  </li> <li>Improve your English level with classes  </li> <li>Opportunity to enroll in the Apprenticeship program and become a Junior Developer  </li> </ol> <p>PROJECT LAB INFORMATION</p> Sphere Description Processes - Software development processes: Scrum, Jira, Kanban Programming &amp; OOP - Python, Code Conventions, Python Basics and OOP, VSCode usage   - Introduction to architecture and design patterns: MVC, Flask overview   - Testing types, Unit/Integration testing, Test design techniques   - Unit testing in Python, developing a testing environment, Documentation Database Management - Installing and configuring databases, User management (privileges, permissions, roles)   - Backups, Types, Recovery and disaster recovery, Basic monitoring   - Tables, relationships, keys, constraints understanding   - DDL, DML, DCL understanding   - Access to databases with Python using ORM Continuous Integration - Principles of continuous integration, Automated build concept   - CI using Jenkins   - Integration with Jira for ticket creation   - Implement basic monitoring for application resources Continuous Delivery - Continuous delivery intro, CD with CI Tools and plugins, CD Tools (GoCD) Branching Strategies - Source control, Git basics (GitHub, GitLab)   - Branches and tags management strategy Virtualization - Types of virtualization (hardware emulation, full virtualization, paravirtualization, OS-level virtualization)   - Containers (LXC, Docker) Automation - Shell Scripting   - Python for administration Monitoring - Distributed monitoring   - Logging (integrations, IaC Configs and alarms) Cloud Computing - Understanding services and applications by type   - Cloud service models   - Cloud computing platforms (AWS, Azure, Google Cloud, OpenStack, etc.)   - Orchestration (Terraform, AWS CloudFormation, Azure Resource Manager, etc.)"}]}